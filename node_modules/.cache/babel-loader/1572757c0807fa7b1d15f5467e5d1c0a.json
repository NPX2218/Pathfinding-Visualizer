{"ast":null,"code":"const scatterRandom = grid => {\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      const currentNode = grid[i][j];\n      const currentNodeHTML = document.getElementById(\"node-\".concat(i, \"-\").concat(j));\n      currentNodeHTML.classList.remove('node-shortest-path', 'node-visited'); //Change the below number (6) to the probability of a node being a wall\n\n      const wallOrNot = Math.floor(Math.random() * 6 + 1);\n\n      if (wallOrNot === 1 && currentNode.isStart !== true && currentNode.isFinish !== true) {\n        currentNode.isWall = true;\n      } else if (currentNode.isStart !== true && currentNode.isFinish !== true) {\n        currentNode.isWall = false;\n      }\n\n      if (currentNode.isVisited === true) {\n        console.log(document.getElementById(\"node-\".concat(i, \"-\").concat(j)));\n        currentNode.isVisited = false;\n      }\n    }\n  }\n\n  return grid;\n};\n\nexport default scatterRandom;\n/*\r\ndocument.getElementById('algorithm-time').innerHTML = '';\r\n    for(let i  = 0; i < grid.length; i++){\r\n      for(let j = 0; j < grid[0].length; j++){\r\n        grid[i][j].isVisited = false;\r\n        grid[i][j].isWall = false;\r\n        grid[i][j].distance = Infinity;\r\n        grid[i][j].previousNode = null;\r\n        if(grid[i][j].isStart === true){\r\n          document.getElementById(`node-${i}-${j}`).className = 'node node-img-start';\r\n        }else if(grid[i][j].isFinish === true){\r\n          document.getElementById(`node-${i}-${j}`).className = 'node node-img-finish';\r\n        }else if(grid[i][j].isWall === true){\r\n          document.getElementById(`node-${i}-${j}`).className = 'node node-wall';\r\n        }else{\r\n        document.getElementById(`node-${i}-${j}`).className =\r\n          'node';\r\n        }\r\n*/\n\n/*\r\n\r\n\r\nfor(let i  = 0; i < board.length; i++){\r\n        for(let j = 0; j < board[i].length; j++){\r\n            console.log(board[i][j]);\r\n        }}\r\n  let currentIdX = 1;\r\n  let currentIdY = 0;\r\n  let relevantStatuses = [\"start\", \"target\", \"object\"];\r\n  while (currentIdX > 0 && currentIdY < board.width) {\r\n    let currentId = `${currentIdX}-${currentIdY}`;\r\n    let currentNode = board.nodes[currentId];\r\n    let currentHTMLNode = document.getElementById(currentId);\r\n    if (!relevantStatuses.includes(currentNode.status)) {\r\n      currentNode.status = \"wall\";\r\n      board.wallsToAnimate.push(currentHTMLNode);\r\n    }\r\n    currentIdX--;\r\n    currentIdY++;\r\n  }\r\n  while (currentIdX < board.height - 2 && currentIdY < board.width) {\r\n    let currentId = `${currentIdX}-${currentIdY}`;\r\n    let currentNode = board.nodes[currentId];\r\n    let currentHTMLNode = document.getElementById(currentId);\r\n    if (!relevantStatuses.includes(currentNode.status)) {\r\n      currentNode.status = \"wall\";\r\n      board.wallsToAnimate.push(currentHTMLNode);\r\n    }\r\n    currentIdX++;\r\n    currentIdY++;\r\n  }\r\n  while (currentIdX > 0 && currentIdY < board.width - 1) {\r\n    let currentId = `${currentIdX}-${currentIdY}`;\r\n    let currentNode = board.nodes[currentId];\r\n    let currentHTMLNode = document.getElementById(currentId);\r\n    if (!relevantStatuses.includes(currentNode.status)) {\r\n      currentNode.status = \"wall\";\r\n      board.wallsToAnimate.push(currentHTMLNode);\r\n    }\r\n    currentIdX--;\r\n    currentIdY++;\r\n  }\r\n*/","map":{"version":3,"sources":["C:\\Users\\GAMER\\Desktop\\Pathfinding-Visualizer\\src\\algorithms\\scatterRandom.js"],"names":["scatterRandom","grid","i","length","j","currentNode","currentNodeHTML","document","getElementById","classList","remove","wallOrNot","Math","floor","random","isStart","isFinish","isWall","isVisited","console","log"],"mappings":"AAAA,MAAMA,aAAa,GAAIC,IAAD,IAAU;AAC5B,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,IAAI,CAACE,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,SAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,IAAI,CAACC,CAAD,CAAJ,CAAQC,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACpC,YAAMC,WAAW,GAAGJ,IAAI,CAACC,CAAD,CAAJ,CAAQE,CAAR,CAApB;AACA,YAAME,eAAe,GAAGC,QAAQ,CAACC,cAAT,gBAAgCN,CAAhC,cAAqCE,CAArC,EAAxB;AACAE,MAAAA,eAAe,CAACG,SAAhB,CAA0BC,MAA1B,CAAiC,oBAAjC,EAAuD,cAAvD,EAHoC,CAIpC;;AACA,YAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAgB,CAAjB,GAAsB,CAAjC,CAAlB;;AAEA,UAAGH,SAAS,KAAK,CAAd,IAAmBN,WAAW,CAACU,OAAZ,KAAwB,IAA3C,IAAmDV,WAAW,CAACW,QAAZ,KAAyB,IAA/E,EAAqF;AACjFX,QAAAA,WAAW,CAACY,MAAZ,GAAqB,IAArB;AACH,OAFD,MAEM,IAAGZ,WAAW,CAACU,OAAZ,KAAwB,IAAxB,IAAgCV,WAAW,CAACW,QAAZ,KAAyB,IAA5D,EAAkE;AACpEX,QAAAA,WAAW,CAACY,MAAZ,GAAqB,KAArB;AACH;;AAED,UAAGZ,WAAW,CAACa,SAAZ,KAA0B,IAA7B,EAAkC;AAChCC,QAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACC,cAAT,gBAAgCN,CAAhC,cAAqCE,CAArC,EAAZ;AACAC,QAAAA,WAAW,CAACa,SAAZ,GAAwB,KAAxB;AACD;AACJ;AACJ;;AACD,SAAOjB,IAAP;AACH,CAtBD;;AAwBA,eAAeD,aAAf;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA","sourcesContent":["const scatterRandom = (grid) => {\r\n    for(let i = 0; i < grid.length; i++) {\r\n        for(let j = 0; j < grid[i].length; j++) {\r\n            const currentNode = grid[i][j];\r\n            const currentNodeHTML = document.getElementById(`node-${i}-${j}`)\r\n            currentNodeHTML.classList.remove('node-shortest-path', 'node-visited')\r\n            //Change the below number (6) to the probability of a node being a wall\r\n            const wallOrNot = Math.floor((Math.random() * 6) + 1);\r\n            \r\n            if(wallOrNot === 1 && currentNode.isStart !== true && currentNode.isFinish !== true) {\r\n                currentNode.isWall = true;\r\n            }else if(currentNode.isStart !== true && currentNode.isFinish !== true) {\r\n                currentNode.isWall = false;\r\n            }\r\n            \r\n            if(currentNode.isVisited === true){\r\n              console.log(document.getElementById(`node-${i}-${j}`))\r\n              currentNode.isVisited = false;\r\n            }\r\n        }\r\n    }\r\n    return grid;\r\n}\r\n\r\nexport default scatterRandom;\r\n\r\n/*\r\ndocument.getElementById('algorithm-time').innerHTML = '';\r\n    for(let i  = 0; i < grid.length; i++){\r\n      for(let j = 0; j < grid[0].length; j++){\r\n        grid[i][j].isVisited = false;\r\n        grid[i][j].isWall = false;\r\n        grid[i][j].distance = Infinity;\r\n        grid[i][j].previousNode = null;\r\n        if(grid[i][j].isStart === true){\r\n          document.getElementById(`node-${i}-${j}`).className = 'node node-img-start';\r\n        }else if(grid[i][j].isFinish === true){\r\n          document.getElementById(`node-${i}-${j}`).className = 'node node-img-finish';\r\n        }else if(grid[i][j].isWall === true){\r\n          document.getElementById(`node-${i}-${j}`).className = 'node node-wall';\r\n        }else{\r\n        document.getElementById(`node-${i}-${j}`).className =\r\n          'node';\r\n        }\r\n*/\r\n\r\n/*\r\n\r\n\r\nfor(let i  = 0; i < board.length; i++){\r\n        for(let j = 0; j < board[i].length; j++){\r\n            console.log(board[i][j]);\r\n        }}\r\n  let currentIdX = 1;\r\n  let currentIdY = 0;\r\n  let relevantStatuses = [\"start\", \"target\", \"object\"];\r\n  while (currentIdX > 0 && currentIdY < board.width) {\r\n    let currentId = `${currentIdX}-${currentIdY}`;\r\n    let currentNode = board.nodes[currentId];\r\n    let currentHTMLNode = document.getElementById(currentId);\r\n    if (!relevantStatuses.includes(currentNode.status)) {\r\n      currentNode.status = \"wall\";\r\n      board.wallsToAnimate.push(currentHTMLNode);\r\n    }\r\n    currentIdX--;\r\n    currentIdY++;\r\n  }\r\n  while (currentIdX < board.height - 2 && currentIdY < board.width) {\r\n    let currentId = `${currentIdX}-${currentIdY}`;\r\n    let currentNode = board.nodes[currentId];\r\n    let currentHTMLNode = document.getElementById(currentId);\r\n    if (!relevantStatuses.includes(currentNode.status)) {\r\n      currentNode.status = \"wall\";\r\n      board.wallsToAnimate.push(currentHTMLNode);\r\n    }\r\n    currentIdX++;\r\n    currentIdY++;\r\n  }\r\n  while (currentIdX > 0 && currentIdY < board.width - 1) {\r\n    let currentId = `${currentIdX}-${currentIdY}`;\r\n    let currentNode = board.nodes[currentId];\r\n    let currentHTMLNode = document.getElementById(currentId);\r\n    if (!relevantStatuses.includes(currentNode.status)) {\r\n      currentNode.status = \"wall\";\r\n      board.wallsToAnimate.push(currentHTMLNode);\r\n    }\r\n    currentIdX--;\r\n    currentIdY++;\r\n  }\r\n*/"]},"metadata":{},"sourceType":"module"}