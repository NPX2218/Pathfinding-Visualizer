{"ast":null,"code":"import { ROWS, COLS, START_NODE_COL, START_NODE_ROW, FINISH_NODE_COL, FINISH_NODE_ROW } from '../PathfindingVisualizer/PathfindingVisualizer';\n\nconst newMaze = grid => {\n  const startNode = grid[START_NODE_ROW][START_NODE_COL];\n  const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n  console.log(grid);\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      console.log(grid[i][j]); //place a wall on every other node\n\n      if (i % 2 === 0 && j % 2 === 0 && grid[i][j].isStart === false && grid[i][j].isFinish === false) {\n        grid[i][j].isWall = true;\n        const nodeHTML = document.getElementById(\"node-\".concat(i, \"-\").concat(j));\n\n        if (nodeHTML) {\n          nodeHTML.classList.add('node-wall');\n        }\n      }\n\n      if (grid[i][j].col === 0 || grid[i][j].col === COLS - 1 || grid[i][j].row === 0 || grid[i][j].row === ROWS - 1) {\n        grid[i][j].isWall = true;\n        const nodeHTML = document.getElementById(\"node-\".concat(i, \"-\").concat(j));\n\n        if (nodeHTML) {\n          nodeHTML.classList.add('node-wall');\n        }\n      }\n\n      if (grid[i][j].isWall === false && (i % 2 !== 0 || j % 2 !== 0)) {\n        const randomNumber = Math.floor(Math.random() * 4);\n\n        if (randomNumber === 1) {\n          grid[i][j].isWall = true;\n          const nodeHTML = document.getElementById(\"node-\".concat(i, \"-\").concat(j));\n\n          if (nodeHTML) {\n            nodeHTML.classList.add('node-wall');\n          }\n        }\n      }\n    }\n  }\n};\n\nexport default newMaze;","map":{"version":3,"sources":["C:\\Users\\GAMER\\Desktop\\Pathfinding-Visualizer\\src\\algorithms\\generateMaze.tsx"],"names":["ROWS","COLS","START_NODE_COL","START_NODE_ROW","FINISH_NODE_COL","FINISH_NODE_ROW","newMaze","grid","startNode","finishNode","console","log","i","length","j","isStart","isFinish","isWall","nodeHTML","document","getElementById","classList","add","col","row","randomNumber","Math","floor","random"],"mappings":"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","sourcesContent":["import { ROWS, COLS, START_NODE_COL, START_NODE_ROW, FINISH_NODE_COL, FINISH_NODE_ROW} from '../PathfindingVisualizer/PathfindingVisualizer';\r\n\r\nconst newMaze = (grid : any) => {\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    console.log(grid)\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[i].length; j++) {\r\n            console.log(grid[i][j])\r\n            //place a wall on every other node\r\n            if (i % 2 === 0 && j % 2 === 0 && grid[i][j].isStart === false && grid[i][j].isFinish === false) {\r\n                grid[i][j].isWall = true;\r\n                const nodeHTML = document.getElementById(`node-${i}-${j}`);\r\n                if(nodeHTML){\r\n                    nodeHTML.classList.add('node-wall');\r\n                }\r\n            }\r\n\r\n            if(grid[i][j].col === 0 || grid[i][j].col === COLS - 1 || grid[i][j].row === 0 || grid[i][j].row === ROWS - 1){\r\n                grid[i][j].isWall = true;\r\n                const nodeHTML = document.getElementById(`node-${i}-${j}`);\r\n                if(nodeHTML){\r\n                    nodeHTML.classList.add('node-wall');\r\n                }\r\n            }\r\n            if (grid[i][j].isWall === false && (i % 2 !== 0 || j % 2 !== 0)) {\r\n                const randomNumber = Math.floor(Math.random() * 4);\r\n                if(randomNumber === 1){\r\n                grid[i][j].isWall = true;\r\n                const nodeHTML = document.getElementById(`node-${i}-${j}`);\r\n                if(nodeHTML){\r\n                    nodeHTML.classList.add('node-wall');\r\n                }\r\n            }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default newMaze;"]},"metadata":{},"sourceType":"module"}