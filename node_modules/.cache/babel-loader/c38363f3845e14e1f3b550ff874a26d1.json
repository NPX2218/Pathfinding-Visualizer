{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\GAMER\\\\Desktop\\\\Pathfinding-Visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\GAMER\\\\Desktop\\\\Pathfinding-Visualizer\\\\src\\\\PathfindingVisualizer\\\\PathfindingVisualizer.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n///////////////////////////////////////\n// IMPORTING MODULES\n///////////////////////////////////////\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport './PathfindingVisualizer.css';\nimport scatterRandom from '../algorithms/scatterRandom';\nimport $ from 'jquery';\nlet windowWidth = $(window).width();\nlet windowHeight = $(window).height();\n\nif (!windowWidth) {\n  windowWidth = window.innerWidth;\n}\n\nif (!windowHeight) {\n  windowHeight = window.innerHeight;\n}\n\nlet rows = Math.floor(windowHeight / 50);\nlet columns = Math.floor(windowWidth / 30);\nlet ROWS = rows; //16\n\nlet COLS = columns; //50\n\nlet START_NODE_COL = Math.floor(COLS / 2.5);\nlet START_NODE_ROW = Math.floor(ROWS / 2);\nlet FINISH_NODE_COL = Math.floor(COLS / 1.5);\nlet FINISH_NODE_ROW = Math.floor(ROWS / 2);\n$(window).on('resize', function () {\n  window.location.reload();\n}); ///////////////////////////////////////\n// CLASS: PATHFINDINGVISUALIZER\n///////////////////////////////////////\n\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setHTMLClass = (node, classNameString) => {\n      const element = document.getElementById(node);\n\n      if (element) {\n        const classNameArray = classNameString.split(' ');\n        classNameArray.forEach(className => {\n          element.classList.add(className);\n        });\n      } else {\n        console.log(\"element not found\");\n      }\n    };\n\n    this.clearGrid = () => {\n      const grid = this.state.grid;\n      const algorithmTime = document.getElementById('algorithm-time');\n\n      if (algorithmTime) {\n        algorithmTime.innerHTML = '';\n      }\n\n      for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[0].length; j++) {\n          const node = grid[i][j];\n          const nodeHTML = document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col));\n          node.isVisited = false;\n          node.isWall = false;\n          node.distance = Infinity;\n          node.previousNode = null;\n\n          if (nodeHTML) {\n            if (node.isStart === true) {\n              nodeHTML.className = 'node node-img-start';\n            } else if (grid[i][j].isFinish === true) {\n              nodeHTML.className = 'node node-img-finish';\n            } else if (grid[i][j].isWall === true) {\n              nodeHTML.className = 'node node-wall';\n            } else {\n              nodeHTML.className = 'node';\n            }\n          }\n        }\n      }\n    };\n\n    this.changeAnimationSpeed = () => {\n      const animationSpeed = document.getElementById('change-speed');\n\n      if (animationSpeed) {\n        console.log(animationSpeed.innerHTML);\n\n        if (animationSpeed.innerHTML === 'Slow' || animationSpeed.innerHTML === 'Change Speed') {\n          animationSpeed.innerHTML = 'Medium';\n          this.setState({\n            animationSpeed: 40\n          });\n        } else if (animationSpeed.innerHTML === 'Medium') {\n          animationSpeed.innerHTML = 'Fast';\n          this.setState({\n            animationSpeed: 10\n          });\n        } else if (animationSpeed.innerHTML === 'Fast') {\n          animationSpeed.innerHTML = 'Slow';\n          this.setState({\n            animationSpeed: 90\n          });\n        }\n      }\n    };\n\n    this.visualizeDijkstra = () => {\n      const grid = this.state.grid;\n\n      for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n          const nodeHTML = document.getElementById(\"node-\".concat(i, \"-\").concat(j));\n\n          if (nodeHTML) {\n            if (grid[i][j].isStart === true) {\n              nodeHTML.className = 'node node-img-start';\n            } else if (grid[i][j].isFinish === true) {\n              nodeHTML.className = 'node node-img-finish';\n            } else if (grid[i][j].isWall === true) {\n              nodeHTML.className = 'node node-wall';\n            } else {\n              nodeHTML.className = 'node';\n            }\n\n            grid[i][j].distance = Infinity;\n            grid[i][j].isVisited = false;\n            grid[i][j].previousNode = null;\n          }\n        }\n      }\n\n      const timeStart = performance.now();\n      const startNode = grid[START_NODE_ROW][START_NODE_COL];\n      const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n      const returnDijkstra = dijkstra(grid, startNode, finishNode);\n\n      if (returnDijkstra) {\n        const startNodeDistance = returnDijkstra.startNodeDistance;\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(returnDijkstra.visitedNodesInOrder, nodesInShortestPathOrder, startNodeDistance);\n        const timeEnd = performance.now();\n        let string = \"\";\n\n        if (startNodeDistance === null) {\n          string = \"and can't reach the target node, it's enclosed into a box!\";\n        } else {\n          string = \"and took \".concat(startNodeDistance, \" steps.\");\n        }\n\n        const algorithmTime = document.getElementById('algorithm-time');\n\n        if (algorithmTime) {\n          algorithmTime.innerHTML = \"Dijkstra's algorithm took \".concat((timeEnd - timeStart) / 1000, \" seconds to execute \").concat(string);\n        }\n      }\n    };\n\n    this.visualizeAstar = () => {\n      const grid = this.state.grid;\n\n      for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n          if (grid[i][j].isStart === true) {\n            this.setHTMLClass(\"node-\".concat(i, \"-\").concat(j), 'node node-img-start');\n          } else if (grid[i][j].isFinish === true) {\n            this.setHTMLClass(\"node-\".concat(i, \"-\").concat(j), 'node node-img-finish');\n          } else if (grid[i][j].isWall === true) {\n            this.setHTMLClass(\"node-\".concat(i, \"-\").concat(j), 'node node-wall');\n          } else {\n            this.setHTMLClass(\"node-\".concat(i, \"-\").concat(j), 'node');\n          }\n\n          grid[i][j].distance = Infinity;\n          grid[i][j].isVisited = false; //grid[i][j].isWall = false;\n\n          grid[i][j].previousNode = null;\n        }\n      }\n      /*\n      const timeStart = performance.now();\n      const startNode = grid[START_NODE_ROW][START_NODE_COL];\n      const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n      const returnAstar = astar(grid, startNode, finishNode, 8);\n      //const startNodeDistance = returnAstar.startNodeDistance;\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n      //this.animateDijkstra(returnAstar.visitedNodesInOrder, nodesInShortestPathOrder);\n      const timeEnd = performance.now();\n      */\n\n    };\n\n    this.generateScatterRandom = () => {\n      const grid = this.state.grid;\n      const walledMaze = scatterRandom(grid);\n      this.setState({\n        grid: walledMaze\n      });\n    };\n\n    this.generateRandomMaze = () => {\n      /*console.log(walledMaze);\n      for(let i = 0; i < ROWS; i++){\n        for(let j = 0; j < COLS; j++){\n          if(walledMaze[0][i][j] === 1){\n            grid[i][j].isWall = true;\n          }else{\n            grid[i][j].isWall = false;\n          }\n          grid[i][j].isWall = false;\n          grid[i][j].isVisited = false;\n          grid[i][j].distance = Infinity;\n          grid[i][j].previousNode = null;\n        }\n      }*/\n    };\n\n    this.state = {\n      grid: [],\n      rightMouseIsPressed: false,\n      leftMouseIsPressed: false,\n      animationSpeed: 10\n    };\n  } ///////////////////////////////////////\n  // FUNCTION: PATHFINDINGVISUALIZER ON MOUNT\n  ///////////////////////////////////////\n\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n\n    window.onload = function () {\n      //TODO: Implement remove and add wall with this, and add drag\n      const nodes = document.querySelectorAll('.node');\n\n      for (let i = 0; i < nodes.length; i++) {\n        nodes[i].addEventListener('mouseenter', function (e) {\n          nodes[i].classList.add('node-hover');\n        });\n        nodes[i].addEventListener('mouseleave', function (e) {\n          nodes[i].classList.remove('node-hover');\n        });\n      }\n      /*\n      nodes[i].addEventListener('mousedown', function(e){\n        if(e.button === 0){\n          console.log(\"left\")\n          console.log(e.target.id)\n        }\n        else if(e.button === 2){\n          console.log(\"right\")\n        }\n        \n      })*/\n\n    };\n  } ///////////////////////////////////////\n  // FUNCTION: PATHFINDINGVISUALIZER ON STATE RELOAD AND UPDATE\n  ///////////////////////////////////////\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const grid = this.state.grid;\n    document.addEventListener('keypress', event => {\n      if (grid !== prevState.grid) {\n        if (event.key === 's') {\n          for (let i = 0; i < grid.length; i++) {\n            for (let j = 0; j < grid[i].length; j++) {\n              const nodeHTML = document.getElementById(\"node-\".concat(i, \"-\").concat(j));\n\n              if (nodeHTML && nodeHTML.classList.contains('node-hover')) {\n                const oldStartNode = document.getElementById(\"node-\".concat(START_NODE_ROW, \"-\").concat(START_NODE_COL));\n\n                if (oldStartNode) {\n                  oldStartNode.classList.remove('node-start');\n                  grid[START_NODE_ROW][START_NODE_COL].isStart = false;\n                }\n\n                nodeHTML.classList.add('node-start');\n                nodeHTML.classList.remove('node-hover');\n                grid[i][j].isStart = true;\n                grid[i][j].isWall = false;\n                START_NODE_ROW = i;\n                START_NODE_COL = j;\n              }\n            }\n          }\n\n          this.setState({\n            grid: grid\n          });\n        }\n      }\n    });\n  }\n\n  handleMouseRightDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      rightMouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.rightMouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      rightMouseIsPressed: false\n    });\n  }\n\n  ///////////////////////////////////////\n  // FUNCTION: ANIMATE DIJKSTRA\n  ///////////////////////////////////////\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder, startNodeDistance) {\n    const animationSpeed = this.state.animationSpeed;\n    console.log(animationSpeed);\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder, startNodeDistance);\n        }, animationSpeed * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n\n        if (node.isStart === true) {\n          this.setHTMLClass(\"node-\".concat(node.row, \"-\").concat(node.col), 'node node-visited node-img-start');\n        } else if (node.isFinish === true) {\n          this.setHTMLClass(\"node-\".concat(node.row, \"-\").concat(node.col), 'node node-visited node-img-finish');\n        } else {\n          this.setHTMLClass(\"node-\".concat(node.row, \"-\").concat(node.col), 'node node-visited');\n        }\n      }, animationSpeed * i);\n    }\n  } ///////////////////////////////////////\n  // FUNCTION: ANIMATE SHORTEST PATH \n  // BETWEEN START AND FINISH NODE\n  ///////////////////////////////////////\n\n\n  animateShortestPath(nodesInShortestPathOrder, startNodeDistance) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n\n        if (node.isStart === true) {\n          this.setHTMLClass(\"node-\".concat(node.row, \"-\").concat(node.col), 'node node-shortest-path node-img-start');\n        } else if (node.isFinish === true && startNodeDistance !== null) {\n          this.setHTMLClass(\"node-\".concat(node.row, \"-\").concat(node.col), 'node node-shortest-path node-img-finish');\n        } else {\n          if (node.isFinish !== true && startNodeDistance !== null) {\n            this.setHTMLClass(\"node-\".concat(node.row, \"-\").concat(node.col), 'node node-shortest-path');\n          }\n        }\n      }, 50 * i);\n    }\n  } ///////////////////////////////////////\n  // FUNCTION: CLEAR GRID\n  ///////////////////////////////////////\n\n\n  render() {\n    const _this$state = this.state,\n          grid = _this$state.grid,\n          rightMouseIsPressed = _this$state.rightMouseIsPressed;\n    return React.createElement(React.Fragment, null, React.createElement(Navbar, {\n      changeAnimationSpeed: this.changeAnimationSpeed,\n      generateScatterRandom: this.generateScatterRandom,\n      visualizeAstar: this.visualizeAstar,\n      generateRandomMaze: this.generateRandomMaze,\n      clearGrid: this.clearGrid,\n      visualizeDijkstra: this.visualizeDijkstra,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, grid.map((row, rowIdx) => {\n      return React.createElement(\"div\", {\n        key: rowIdx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }, row.map((node, nodeIdx) => {\n        const row = node.row,\n              col = node.col,\n              isFinish = node.isFinish,\n              isStart = node.isStart,\n              isWall = node.isWall;\n        return React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          onMouseDown: (row, col) => this.handleMouseRightDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 341\n          },\n          __self: this\n        });\n      }));\n    })), React.createElement(TextArea, {\n      secondaryText: \"Made by Neel Bansal\",\n      text: \"Dijkstra's algorithm is an algorithm for finding the shortest paths between nodes in a graph, it sets every nodes distance to Infinity, and then the main node searches up, down, left and right. It continues this throughout the execution. \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"note-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(Note, {\n      node: \"true\",\n      title: \"Unvisited Node\",\n      iconClass: \"node\",\n      text: \"This is not the start, finish, or wall node; it is a node that has not yet been visited. This is normally how the probram begins, with none of the nodes visited.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }), React.createElement(Note, {\n      node: \"true\",\n      title: \"Start / Source Node\",\n      iconClass: \"node-start\",\n      text: \"The start node is where the program begins its search; it will make that the primary node and work its way to the solution from there. This can be changed by pressing the \\\"s\\\" key over a node.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }), React.createElement(Note, {\n      node: \"true\",\n      title: \"Finish / Target Node\",\n      iconClass: \"node-finish\",\n      text: \"The finish node is the one that the program is looking for and will attempt to locate. It will give an error if it is unable to locate it\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }), React.createElement(Note, {\n      node: \"true\",\n      title: \"Wall Node\",\n      iconClass: \"node-wall\",\n      text: \"The wall nodes prevent the program from searching in that area; they can also be used to demonstrate how roads can prevent cars from entering a specific location.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }), React.createElement(Note, {\n      node: \"true\",\n      title: \"Visited Node\",\n      iconClass: \"node-visited\",\n      text: \"The visited node is the node that the program has visited. It is the node that the program is currently on.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }), React.createElement(Note, {\n      node: \"true\",\n      title: \"Shortest Path Node\",\n      iconClass: \"node-shortest-path\",\n      text: \"The node that the program has visited is the visited node. It's the node where the software looked for the target node previously.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }), React.createElement(Note, {\n      title: \"Grid\",\n      text: \"The grid is the area that the program searches. It is the area that the program searches for the target node.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: 'left',\n        padding: '50px 0px 0px 100px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        display: 'left',\n        padding: '0px 10px 0px 100px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        display: 'left',\n        padding: '0px 10px 30px 100px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    })))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }));\n  } ///////////////////////////////////////\n  // FUNCTION: GENERATE SCATTER RANDOM\n  ///////////////////////////////////////\n\n\n} ///////////////////////////////////////\n// CLASS: NAVBAR\n///////////////////////////////////////\n\nclass Navbar extends Component {\n  render() {\n    let clearGrid = this.props.clearGrid;\n    let visualizeDijkstra = this.props.visualizeDijkstra;\n    let generateRandomMaze = this.props.generateRandomMaze;\n    let visualizeAstar = this.props.visualizeAstar;\n    let generateScatterRandom = this.props.generateScatterRandom;\n    let changeAnimationSpeed = this.props.changeAnimationSpeed;\n    return React.createElement(\"div\", {\n      className: \"navbar-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"navbar navbar-dark navbar-expand justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"navbar-nav nav-justified w-100 text-center mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"nav-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"nav-link d-flex flex-column\",\n      \"data-toggle\": \"collapse\",\n      onClick: () => visualizeDijkstra(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"fa fa-map-marker fa-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"d-none d-sm-inline mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, \"Dijkstra's Algorithm\"))), React.createElement(\"li\", {\n      className: \"nav-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"nav-link d-flex flex-column\",\n      \"data-toggle\": \"collapse\",\n      onClick: () => generateScatterRandom(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"fa fa-question fa-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"d-none d-sm-inline mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }, \"Generate Scatter\"))), React.createElement(\"li\", {\n      className: \"nav-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"nav-link d-flex flex-column\",\n      \"data-toggle\": \"collapse\",\n      onClick: () => changeAnimationSpeed(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"fa fa-fast-forward fa-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      id: \"change-speed\",\n      className: \"d-none d-sm-inline mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, \"Change Speed\"))), React.createElement(\"li\", {\n      className: \"nav-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"nav-link d-flex flex-column\",\n      \"data-toggle\": \"collapse\",\n      onClick: () => clearGrid(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"fa fa-th fa-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"d-none d-sm-inline mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, \"Clear Grid\")))))));\n  }\n\n}\n\nclass Note extends Component {\n  render() {\n    const title = this.props.title;\n    const text = this.props.text;\n    const iconClass = this.props.iconClass;\n    const node = this.props.node;\n    let nodeDiv;\n\n    if (node) {\n      nodeDiv = React.createElement(\"div\", {\n        style: {\n          width: '25px',\n          height: '25px',\n          outline: '1px solid rgb(175, 216, 248)',\n          display: 'flex',\n          margin: '15% 45%',\n          justifyContent: 'center',\n          alignItems: 'center',\n          verticalAlign: 'text-bottom'\n        },\n        className: iconClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499\n        },\n        __self: this\n      });\n    } else {\n      nodeDiv = null;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"note-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card\",\n      style: {\n        width: \"18rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, this.props.children, nodeDiv, React.createElement(\"div\", {\n      className: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"card-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }, title), React.createElement(\"p\", {\n      className: \"card-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, text))));\n  }\n\n} ///////////////////////////////////////\n// CLASS: TEXTAREA\n///////////////////////////////////////\n\n\nclass TextArea extends Component {\n  render() {\n    const text = this.props.text;\n    const secondaryText = this.props.secondaryText;\n    return React.createElement(\"div\", {\n      className: \"note-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"note\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, text), React.createElement(\"p\", {\n      id: \"algorithm-time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      style: {\n        fontWeight: 'normal'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, secondaryText)));\n  }\n\n} ///////////////////////////////////////\n// FUNCTION: GET INITIAL GRID\n///////////////////////////////////////\n\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < ROWS; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < COLS; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n}; ///////////////////////////////////////\n// FUNCTION: CREATE NODE\n///////////////////////////////////////\n\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n\n  const newNode = _objectSpread({}, node, {\n    isWall: !node.isWall\n  });\n\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStartNode = (grid, row, col) => {\n  const newGrid = grid.slice();\n\n  for (let i = 0; i < ROWS; i++) {\n    for (let j = 0; j < COLS; j++) {\n      if (newGrid[i][j].isStart) {\n        newGrid[i][j].isStart = false;\n      }\n    }\n  }\n\n  const node = newGrid[row][col];\n\n  const newNode = _objectSpread({}, node, {\n    isStart: true,\n    isWall: false\n  });\n\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["C:\\Users\\GAMER\\Desktop\\Pathfinding-Visualizer\\src\\PathfindingVisualizer\\PathfindingVisualizer.tsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","scatterRandom","$","windowWidth","window","width","windowHeight","height","innerWidth","innerHeight","rows","Math","floor","columns","ROWS","COLS","START_NODE_COL","START_NODE_ROW","FINISH_NODE_COL","FINISH_NODE_ROW","on","location","reload","PathfindingVisualizer","constructor","props","setHTMLClass","node","classNameString","element","document","getElementById","classNameArray","split","forEach","className","classList","add","console","log","clearGrid","grid","state","algorithmTime","innerHTML","i","length","j","nodeHTML","row","col","isVisited","isWall","distance","Infinity","previousNode","isStart","isFinish","changeAnimationSpeed","animationSpeed","setState","visualizeDijkstra","timeStart","performance","now","startNode","finishNode","returnDijkstra","startNodeDistance","nodesInShortestPathOrder","animateDijkstra","visitedNodesInOrder","timeEnd","string","visualizeAstar","generateScatterRandom","walledMaze","generateRandomMaze","rightMouseIsPressed","leftMouseIsPressed","componentDidMount","getInitialGrid","onload","nodes","querySelectorAll","addEventListener","e","remove","componentDidUpdate","prevProps","prevState","event","key","contains","oldStartNode","handleMouseRightDown","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","setTimeout","animateShortestPath","render","map","rowIdx","nodeIdx","display","padding","outline","margin","justifyContent","alignItems","verticalAlign","Navbar","Note","title","text","iconClass","nodeDiv","children","TextArea","secondaryText","fontWeight","currentRow","push","createNode","slice","newNode","getNewGridWithStartNode"],"mappings":"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","sourcesContent":["///////////////////////////////////////\n// IMPORTING MODULES\n///////////////////////////////////////\n\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport './PathfindingVisualizer.css';\nimport scatterRandom from '../algorithms/scatterRandom';\nimport $ from 'jquery';\n\n\nlet windowWidth = $(window).width() ;\nlet windowHeight = $(window).height();\nif(!windowWidth){windowWidth = window.innerWidth;}\nif(!windowHeight){windowHeight = window.innerHeight;}\n\nlet rows = Math.floor(windowHeight / 50);\nlet columns = Math.floor(windowWidth / 30);\n\nlet ROWS = rows; //16\nlet COLS = columns; //50\nlet START_NODE_COL = Math.floor(COLS / 2.5);\nlet START_NODE_ROW = Math.floor(ROWS / 2);\nlet FINISH_NODE_COL = Math.floor(COLS / 1.5);\nlet FINISH_NODE_ROW = Math.floor(ROWS / 2);\n\n\n$(window).on('resize', function(){\n  window.location.reload();\n})\n\n///////////////////////////////////////\n// CLASS: PATHFINDINGVISUALIZER\n///////////////////////////////////////\n\ninterface PathfindingVisualizerProps {\n  grid: Array<Array<Node>>;\n  rightMouseIsPressed: boolean;\n  leftMouseIsPressed: boolean;\n}\n\nexport default class PathfindingVisualizer extends Component <any, any>{\n  constructor(props: PathfindingVisualizerProps) {\n    super(props);\n    this.state = {\n      grid: [],\n      rightMouseIsPressed: false,\n      leftMouseIsPressed: false,\n      animationSpeed: 10,\n    };\n  }\n\n  ///////////////////////////////////////\n  // FUNCTION: PATHFINDINGVISUALIZER ON MOUNT\n  ///////////////////////////////////////\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n    window.onload = function(){\n      //TODO: Implement remove and add wall with this, and add drag\n      \n      const nodes = document.querySelectorAll('.node')\n      for(let i = 0; i < nodes.length; i++){\n        nodes[i].addEventListener('mouseenter', function(e){\n          nodes[i].classList.add('node-hover');\n        })\n        nodes[i].addEventListener('mouseleave', function(e){\n          nodes[i].classList.remove('node-hover');\n        })\n      }\n        /*\n        nodes[i].addEventListener('mousedown', function(e){\n          if(e.button === 0){\n            console.log(\"left\")\n            console.log(e.target.id)\n          }\n          else if(e.button === 2){\n            console.log(\"right\")\n          }\n          \n        })*/\n      }\n    }\n    \n  ///////////////////////////////////////\n  // FUNCTION: PATHFINDINGVISUALIZER ON STATE RELOAD AND UPDATE\n  ///////////////////////////////////////\n  componentDidUpdate(prevProps : any, prevState : any){\n    const { grid }  = this.state;\n\n    document.addEventListener('keypress', (event) => {\n      if (grid !== prevState.grid) {\n        if (event.key === 's') {\n            for(let i = 0; i < grid.length; i++){\n              for(let j = 0; j < grid[i].length; j++){\n                const nodeHTML = document.getElementById(`node-${i}-${j}`);\n                if(nodeHTML && nodeHTML.classList.contains('node-hover')){\n                  const oldStartNode = document.getElementById(`node-${START_NODE_ROW}-${START_NODE_COL}`);\n                  if(oldStartNode){\n\n                    oldStartNode.classList.remove('node-start');\n                    grid[START_NODE_ROW][START_NODE_COL].isStart = false;\n                  }\n                  \n                  nodeHTML.classList.add('node-start');\n                  nodeHTML.classList.remove('node-hover');\n                  grid[i][j].isStart = true;\n                  grid[i][j].isWall = false;\n\n                  START_NODE_ROW = i;\n                  START_NODE_COL = j;\n              }\n\n                }\n            }\n            this.setState({ grid: grid });\n              \n            }\n          }\n  });\n}\n\n  handleMouseRightDown(row : number, col : number) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, rightMouseIsPressed: true});\n  }\n\n\n  handleMouseEnter(row : number, col : number) {\n    if (!this.state.rightMouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({rightMouseIsPressed: false});\n  }\n\n  setHTMLClass = (node : string, classNameString : string) => {\n    const element = document.getElementById(node);\n    if(element){\n      const classNameArray = classNameString.split(' ');\n      classNameArray.forEach(className => {\n        element.classList.add(className);\n        }); \n    } else {\n      console.log(\"element not found\")\n    }\n  }\n\n  ///////////////////////////////////////\n  // FUNCTION: ANIMATE DIJKSTRA\n  ///////////////////////////////////////\n  animateDijkstra(visitedNodesInOrder: Array<any>, nodesInShortestPathOrder: Array<any>, startNodeDistance : number) {\n    const { animationSpeed } = this.state;\n    console.log(animationSpeed)    \n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder, startNodeDistance);\n        }, animationSpeed * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        if(node.isStart === true){\n          this.setHTMLClass(`node-${node.row}-${node.col}`, 'node node-visited node-img-start');\n        }else if(node.isFinish === true){\n          this.setHTMLClass(`node-${node.row}-${node.col}`, 'node node-visited node-img-finish');\n        }else{\n          this.setHTMLClass(`node-${node.row}-${node.col}`, 'node node-visited');\n        }\n      }, animationSpeed * i);\n    }\n  }\n\n  ///////////////////////////////////////\n  // FUNCTION: ANIMATE SHORTEST PATH \n  // BETWEEN START AND FINISH NODE\n  ///////////////////////////////////////\n  animateShortestPath(nodesInShortestPathOrder : Array<any>, startNodeDistance : any) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        if(node.isStart === true){\n          this.setHTMLClass(`node-${node.row}-${node.col}`, 'node node-shortest-path node-img-start');\n        }else if(node.isFinish === true && startNodeDistance !== null){\n          this.setHTMLClass(`node-${node.row}-${node.col}`, 'node node-shortest-path node-img-finish');\n        }else{\n        if(node.isFinish !== true && startNodeDistance !== null){\n          this.setHTMLClass(`node-${node.row}-${node.col}`, 'node node-shortest-path');\n        }}\n        }, 50 * i);\n    }\n  }\n\n  ///////////////////////////////////////\n  // FUNCTION: CLEAR GRID\n  ///////////////////////////////////////\n  clearGrid = () => {\n    const { grid } = this.state;\n    const algorithmTime = document.getElementById('algorithm-time');\n    if(algorithmTime){\n      algorithmTime.innerHTML = '';\n    }\n\n    for(let i  = 0; i < grid.length; i++){\n      for(let j = 0; j < grid[0].length; j++){\n        const node = grid[i][j];\n        const nodeHTML = document.getElementById(`node-${node.row}-${node.col}`);\n        node.isVisited = false;\n        node.isWall = false;\n        node.distance = Infinity;\n        node.previousNode = null;\n        if(nodeHTML){\n          if(node.isStart === true){\n            nodeHTML.className = 'node node-img-start';\n          }else if(grid[i][j].isFinish === true){\n            nodeHTML.className = 'node node-img-finish';\n          }else if(grid[i][j].isWall === true){\n            nodeHTML.className = 'node node-wall';\n          }else{\n            nodeHTML.className = 'node';\n          }\n        }\n      }\n    }\n  }\n\n  changeAnimationSpeed = () => {\n    const animationSpeed = document.getElementById('change-speed');\n    if(animationSpeed){ \n      console.log(animationSpeed.innerHTML);\n      if(animationSpeed.innerHTML === 'Slow' || animationSpeed.innerHTML === 'Change Speed'){\n        animationSpeed.innerHTML = 'Medium';\n        this.setState({animationSpeed: 40});\n      }else if(animationSpeed.innerHTML === 'Medium'){\n        animationSpeed.innerHTML = 'Fast';\n        this.setState({animationSpeed: 10});\n      }else if(animationSpeed.innerHTML === 'Fast'){\n        animationSpeed.innerHTML = 'Slow';\n        this.setState({animationSpeed: 90});\n      }\n    }\n  };\n\n  ///////////////////////////////////////\n  // FUNCTION: VISUALIZE DIJKSTRA\n  ///////////////////////////////////////\n  visualizeDijkstra = () => {\n    const { grid } = this.state;\n\n    for(let i  = 0; i < grid.length; i++){\n      for(let j = 0; j < grid[i].length; j++){\n        const nodeHTML = document.getElementById(`node-${i}-${j}`);\n        if(nodeHTML){\n          if(grid[i][j].isStart === true){\n            nodeHTML.className = 'node node-img-start';\n          }else if(grid[i][j].isFinish === true){\n            nodeHTML.className = 'node node-img-finish';\n          }else if(grid[i][j].isWall === true){\n            nodeHTML.className = 'node node-wall';\n          }else{\n            nodeHTML.className = 'node';\n          }\n          grid[i][j].distance = Infinity;\n          grid[i][j].isVisited = false;\n          grid[i][j].previousNode = null;\n      }\n        }\n      }    \n\n    const timeStart = performance.now();\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const returnDijkstra = dijkstra(grid, startNode, finishNode);\n    if(returnDijkstra){\n      const startNodeDistance = returnDijkstra.startNodeDistance;\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n      this.animateDijkstra(returnDijkstra.visitedNodesInOrder, nodesInShortestPathOrder, startNodeDistance);\n      const timeEnd = performance.now();\n      let string = \"\"\n      if(startNodeDistance === null){\n        string = \"and can't reach the target node, it's enclosed into a box!\"\n      }else{\n        string = `and took ${startNodeDistance} steps.`\n      }\n      const algorithmTime = document.getElementById('algorithm-time');  \n      if(algorithmTime){\n        algorithmTime.innerHTML = `Dijkstra's algorithm took ${(timeEnd - timeStart) / 1000} seconds to execute ${string}`;\n      }\n    }\n    \n    }\n  \n\n  visualizeAstar = () => {\n    const { grid } = this.state;\n    for(let i  = 0; i < grid.length; i++){\n      for(let j = 0; j < grid[i].length; j++){\n        if(grid[i][j].isStart === true){\n          this.setHTMLClass(`node-${i}-${j}`, 'node node-img-start');\n        }else if(grid[i][j].isFinish === true){\n          this.setHTMLClass(`node-${i}-${j}`, 'node node-img-finish');\n        }else if(grid[i][j].isWall === true){\n          this.setHTMLClass(`node-${i}-${j}`, 'node node-wall');\n        }else{\n          this.setHTMLClass(`node-${i}-${j}`, 'node');\n        }\n        grid[i][j].distance = Infinity;\n        grid[i][j].isVisited = false;\n        //grid[i][j].isWall = false;\n        grid[i][j].previousNode = null;\n        }\n      }\n      /*\n    const timeStart = performance.now();\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const returnAstar = astar(grid, startNode, finishNode, 8);\n    //const startNodeDistance = returnAstar.startNodeDistance;\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    //this.animateDijkstra(returnAstar.visitedNodesInOrder, nodesInShortestPathOrder);\n    const timeEnd = performance.now();\n    */\n  }\n\n  render() {\n    const { grid, rightMouseIsPressed } = this.state;\n    return (\n      <>\n        <Navbar changeAnimationSpeed={this.changeAnimationSpeed} generateScatterRandom={this.generateScatterRandom} visualizeAstar={this.visualizeAstar} generateRandomMaze={this.generateRandomMaze} clearGrid={this.clearGrid} visualizeDijkstra={this.visualizeDijkstra}/>\n        <div className=\"grid\">\n          {grid.map((row : any, rowIdx : number) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node : any, nodeIdx : number) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      onMouseDown={(row : number, col : number) => this.handleMouseRightDown(row, col)}\n                      onMouseEnter={(row : number, col : number) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        \n        <TextArea secondaryText=\"Made by Neel Bansal\" text=\"Dijkstra's algorithm is an algorithm for finding the shortest paths between nodes in a graph, it sets every nodes distance to Infinity, and then the main node searches up, down, left and right. It continues this throughout the execution. \"/>\n        <div className='note-wrapper'>   \n          <Note node=\"true\" title='Unvisited Node' iconClass='node' text='This is not the start, finish, or wall node; it is a node that has not yet been visited. This is normally how the probram begins, with none of the nodes visited.'/>\n          <Note node=\"true\" title='Start / Source Node' iconClass='node-start' text='The start node is where the program begins its search; it will make that the primary node and work its way to the solution from there. This can be changed by pressing the \"s\" key over a node.'/>\n          <Note node=\"true\" title='Finish / Target Node' iconClass='node-finish' text=\"The finish node is the one that the program is looking for and will attempt to locate. It will give an error if it is unable to locate it\"/>\n          <Note node=\"true\" title='Wall Node' iconClass='node-wall' text='The wall nodes prevent the program from searching in that area; they can also be used to demonstrate how roads can prevent cars from entering a specific location.'/>\n          <Note node=\"true\" title='Visited Node' iconClass='node-visited' text='The visited node is the node that the program has visited. It is the node that the program is currently on.'/>\n          <Note node=\"true\" title='Shortest Path Node' iconClass='node-shortest-path' text=\"The node that the program has visited is the visited node. It's the node where the software looked for the target node previously.\"/>\n          <Note title=\"Grid\" text='The grid is the area that the program searches. It is the area that the program searches for the target node.'>\n            <div style={{display: 'left', padding: '50px 0px 0px 100px'}}>\n              <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n              <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n              <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n            </div>\n\n          <div style={{display: 'left', padding: '0px 10px 0px 100px'}}>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n          </div>\n          <div style={{display: 'left', padding: '0px 10px 30px 100px'}}>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n          </div> \n          </Note>\n        </div>\n        <br></br>\n        </>\n    );\n  }\n\n\n  ///////////////////////////////////////\n  // FUNCTION: GENERATE SCATTER RANDOM\n  ///////////////////////////////////////\n  \n  generateScatterRandom = () =>{\n    const { grid } : any = this.state;\n\n    const walledMaze = scatterRandom(grid)\n    this.setState({\n      grid: walledMaze\n    })\n  }\n  \n  generateRandomMaze = () => {\n    /*console.log(walledMaze);\n    for(let i = 0; i < ROWS; i++){\n      for(let j = 0; j < COLS; j++){\n        if(walledMaze[0][i][j] === 1){\n          grid[i][j].isWall = true;\n        }else{\n          grid[i][j].isWall = false;\n        }\n        grid[i][j].isWall = false;\n        grid[i][j].isVisited = false;\n        grid[i][j].distance = Infinity;\n        grid[i][j].previousNode = null;\n      }\n    }*/\n      }\n}\n\n///////////////////////////////////////\n// CLASS: NAVBAR\n///////////////////////////////////////\n\ninterface NavbarProps {\n  clearGrid: any; \n  visualizeDijkstra : any;\n  generateRandomMaze : any;\n  visualizeAstar : any;\n  generateScatterRandom  : any;\n  changeAnimationSpeed : any;\n} \n\nclass Navbar extends Component <NavbarProps> {\n  render() {\n    let clearGrid = this.props.clearGrid;\n    let visualizeDijkstra = this.props.visualizeDijkstra; \n    let generateRandomMaze = this.props.generateRandomMaze;    \n    let visualizeAstar = this.props.visualizeAstar;\n    let generateScatterRandom = this.props.generateScatterRandom;\n    let changeAnimationSpeed = this.props.changeAnimationSpeed;\n    return (\n      <div className=\"navbar-wrapper\">\n      <nav className=\"navbar navbar-dark navbar-expand justify-content-center\">\n    <div className=\"container\">\n        <ul className=\"navbar-nav nav-justified w-100 text-center mt-1\">\n        <li className=\"nav-item\">\n                <a className=\"nav-link d-flex flex-column\" data-toggle=\"collapse\" onClick={() => visualizeDijkstra()}>\n                    <span className=\"fa fa-map-marker fa-lg\"></span>\n                    <span className=\"d-none d-sm-inline mt-1\">Dijkstra's Algorithm</span>\n                </a>\n            </li> \n            <li className=\"nav-item\">\n                <a className=\"nav-link d-flex flex-column\" data-toggle=\"collapse\" onClick={() => generateScatterRandom()}>\n                    <span className=\"fa fa-question fa-lg\"></span>\n                    <span className=\"d-none d-sm-inline mt-1\">Generate Scatter</span>\n                </a>\n            </li>\n            <li className=\"nav-item\">\n                <a className=\"nav-link d-flex flex-column\" data-toggle=\"collapse\" onClick={() => changeAnimationSpeed()}>\n                    <span className=\"fa fa-fast-forward fa-lg\"></span>\n                    <span id=\"change-speed\" className=\"d-none d-sm-inline mt-1\">Change Speed</span>\n                </a>\n            </li>\n            <li className=\"nav-item\">\n                <a className=\"nav-link d-flex flex-column\" data-toggle=\"collapse\" onClick={() => clearGrid()}>\n                    <span className=\"fa fa-th fa-lg\"></span>\n                    <span className=\"d-none d-sm-inline mt-1\">Clear Grid</span>\n                </a>\n            </li>\n        </ul>\n    </div>\n</nav>  \n</div>\n      \n    );\n  }\n}\ninterface NoteProps{\n  title?: string;\n  text?: string;\n  iconClass?: string;\n  node?: string;\n  children?: any;\n}\n\nclass Note extends Component <NoteProps>{\n  \n  render() {\n    const title = this.props.title;\n    const text = this.props.text;\n    const iconClass = this.props.iconClass;\n    const node = this.props.node;\n    let nodeDiv;\n    if(node){\n      nodeDiv = <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'flex', margin: '15% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className={iconClass}></div>\n    }else{\n      nodeDiv = null;\n    }\n\n    return (\n      <div className=\"note-wrapper\">\n      <div className=\"card\" style={{width: \"18rem\"}}>\n        {this.props.children}\n        {nodeDiv}\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{title}</h5>\n          <p className=\"card-text\">{text}</p>\n        </div>\n      </div>\n      </div>\n    );\n    }\n}\n\n///////////////////////////////////////\n// CLASS: TEXTAREA\n///////////////////////////////////////\n\ninterface TextAreaProps {\n  text: string;\n  secondaryText?: string;\n}\n\nclass TextArea extends Component <TextAreaProps> {\n  render() {\n    const text = this.props.text\n    const secondaryText = this.props.secondaryText\n    return (\n      <div className=\"note-wrapper\">\n        <div className=\"note\">\n          <p>{text}</p>\n          <p id=\"algorithm-time\"></p>\n          <p style={{fontWeight: 'normal'}}>{secondaryText}</p>\n          </div>\n      </div>\n    );\n  }\n}\n\n///////////////////////////////////////\n// FUNCTION: GET INITIAL GRID\n///////////////////////////////////////\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < ROWS; row++) {\n    const currentRow = [];\n    for (let col = 0; col < COLS; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\n///////////////////////////////////////\n// FUNCTION: CREATE NODE\n///////////////////////////////////////\nconst createNode = (col : number, row : number) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid: Array<any>, row : number, col : number) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStartNode = (grid: Array<any>, row : number, col : number) => {\n  const newGrid = grid.slice();\n\n  for (let i = 0; i < ROWS; i++) {\n    for (let j = 0; j < COLS; j++) {\n      if (newGrid[i][j].isStart) {\n        newGrid[i][j].isStart = false;\n      }\n    }\n  }\n\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isStart: true,\n    isWall: false,\n  };\n\n  newGrid[row][col] = newNode;\n  return newGrid;\n}\n"]},"metadata":{},"sourceType":"module"}