{"ast":null,"code":"import { START_NODE_COL, START_NODE_ROW, FINISH_NODE_COL, FINISH_NODE_ROW } from '../PathfindingVisualizer/PathfindingVisualizer';\n\nconst newMaze = grid => {\n  const startNode = grid[START_NODE_ROW][START_NODE_COL];\n  const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[j] === 0) {\n        grid[i][j].isWall = true;\n        const node = document.getElementById(\"node-\".concat(i, \"-\").concat(j));\n\n        if (node) {\n          node.classList.add('node-wall');\n        }\n      }\n    }\n  }\n};\n\nexport default newMaze;","map":{"version":3,"sources":["C:\\Users\\GAMER\\Desktop\\Pathfinding-Visualizer\\src\\algorithms\\generateMaze.tsx"],"names":["START_NODE_COL","START_NODE_ROW","FINISH_NODE_COL","FINISH_NODE_ROW","newMaze","grid","startNode","finishNode","i","length","j","isWall","node","document","getElementById","classList","add"],"mappings":"AAAA,SAAqBA,cAArB,EAAqCC,cAArC,EAAqDC,eAArD,EAAsEC,eAAtE,QAA4F,gDAA5F;;AAEA,MAAMC,OAAO,GAAIC,IAAD,IAAgB;AAC5B,QAAMC,SAAS,GAAGD,IAAI,CAACJ,cAAD,CAAJ,CAAqBD,cAArB,CAAlB;AACA,QAAMO,UAAU,GAAGF,IAAI,CAACF,eAAD,CAAJ,CAAsBD,eAAtB,CAAnB;;AACA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACG,CAAD,CAAJ,CAAQC,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACrC,UAAGL,IAAI,CAACK,CAAD,CAAJ,KAAY,CAAf,EAAiB;AACbL,QAAAA,IAAI,CAACG,CAAD,CAAJ,CAAQE,CAAR,EAAWC,MAAX,GAAoB,IAApB;AACA,cAAMC,IAAI,GAAGC,QAAQ,CAACC,cAAT,gBAAgCN,CAAhC,cAAqCE,CAArC,EAAb;;AACA,YAAGE,IAAH,EAAQ;AACJA,UAAAA,IAAI,CAACG,SAAL,CAAeC,GAAf,CAAmB,WAAnB;AACH;AACJ;AACJ;AACJ;AACJ,CAdD;;AAgBA,eAAeZ,OAAf","sourcesContent":["import { ROWS, COLS, START_NODE_COL, START_NODE_ROW, FINISH_NODE_COL, FINISH_NODE_ROW} from '../PathfindingVisualizer/PathfindingVisualizer';\r\n\r\nconst newMaze = (grid : any) => {\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[i].length; j++) {\r\n            if(grid[j] === 0){\r\n                grid[i][j].isWall = true;\r\n                const node = document.getElementById(`node-${i}-${j}`);\r\n                if(node){\r\n                    node.classList.add('node-wall');\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default newMaze;"]},"metadata":{},"sourceType":"module"}