{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\GAMER\\\\Desktop\\\\Pathfinding-Visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\GAMER\\\\Desktop\\\\Pathfinding-Visualizer\\\\src\\\\PathfindingVisualizer\\\\PathfindingVisualizer.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n///////////////////////////////////////\n// IMPORTING MODULES\n///////////////////////////////////////\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport './PathfindingVisualizer.css';\nimport scatterRandom from '../algorithms/scatterRandom';\nimport $ from 'jquery';\nlet windowWidth = $(window).width();\nlet windowHeight = $(window).height();\n\nif (!windowWidth) {\n  windowWidth = window.innerWidth;\n}\n\nif (!windowHeight) {\n  windowHeight = window.innerHeight;\n}\n\nlet rows = Math.floor(windowHeight / 50);\nlet columns = Math.floor(windowWidth / 30);\nlet ROWS = rows; //16\n\nlet COLS = columns; //50\n\nlet START_NODE_COL = Math.floor(COLS / 2.5);\nlet START_NODE_ROW = Math.floor(ROWS / 2);\nlet FINISH_NODE_COL = Math.floor(COLS / 1.5);\nlet FINISH_NODE_ROW = Math.floor(ROWS / 2);\n$(window).on('resize', function () {\n  window.location.reload();\n}); ///////////////////////////////////////\n// CLASS: PATHFINDINGVISUALIZER\n///////////////////////////////////////\n\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setHTMLClass = (node, classNameString) => {\n      const element = document.getElementById(node);\n\n      if (element) {\n        const classNameArray = classNameString.split(' ');\n        classNameArray.forEach(className => {\n          element.classList.add(className);\n        });\n      } else {\n        console.log(\"element not found\");\n      }\n    };\n\n    this.clearGrid = () => {\n      const grid = this.state.grid;\n      const algorithmTime = document.getElementById('algorithm-time');\n\n      if (algorithmTime) {\n        algorithmTime.innerHTML = '';\n      }\n\n      for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[0].length; j++) {\n          const node = grid[i][j];\n          const nodeHTML = document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col));\n          node.isVisited = false;\n          node.isWall = false;\n          node.distance = Infinity;\n          node.previousNode = null;\n\n          if (nodeHTML) {\n            if (node.isStart === true) {\n              nodeHTML.className = 'node node-img-start';\n            } else if (grid[i][j].isFinish === true) {\n              nodeHTML.className = 'node node-img-finish';\n            } else if (grid[i][j].isWall === true) {\n              nodeHTML.className = 'node node-wall';\n            } else {\n              nodeHTML.className = 'node';\n            }\n          }\n        }\n      }\n    };\n\n    this.changeAnimationSpeed = () => {\n      const animationSpeed = document.getElementById('change-speed');\n\n      if (animationSpeed) {\n        console.log(animationSpeed.innerHTML);\n\n        if (animationSpeed.innerHTML === 'Slow' || animationSpeed.innerHTML === 'Change Speed') {\n          animationSpeed.innerHTML = 'Medium';\n          this.setState({\n            animationSpeed: 40\n          });\n        } else if (animationSpeed.innerHTML === 'Medium') {\n          animationSpeed.innerHTML = 'Fast';\n          this.setState({\n            animationSpeed: 10\n          });\n        } else if (animationSpeed.innerHTML === 'Fast') {\n          animationSpeed.innerHTML = 'Slow';\n          this.setState({\n            animationSpeed: 90\n          });\n        }\n      }\n    };\n\n    this.visualizeDijkstra = () => {\n      const _this$state = this.state,\n            grid = _this$state.grid,\n            isAnimationRunning = _this$state.isAnimationRunning;\n\n      if (isAnimationRunning === false) {\n        this.setState({\n          isAnimationRunning: true\n        });\n\n        for (let i = 0; i < grid.length; i++) {\n          for (let j = 0; j < grid[i].length; j++) {\n            const nodeHTML = document.getElementById(\"node-\".concat(i, \"-\").concat(j));\n\n            if (nodeHTML) {\n              if (grid[i][j].isStart === true) {\n                nodeHTML.className = 'node node-img-start';\n              } else if (grid[i][j].isFinish === true) {\n                nodeHTML.className = 'node node-img-finish';\n              } else if (grid[i][j].isWall === true) {\n                nodeHTML.className = 'node node-wall';\n              } else {\n                nodeHTML.className = 'node';\n              }\n\n              grid[i][j].distance = Infinity;\n              grid[i][j].isVisited = false;\n              grid[i][j].previousNode = null;\n            }\n          }\n        }\n\n        const timeStart = performance.now();\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n        const returnDijkstra = dijkstra(grid, startNode, finishNode);\n\n        if (returnDijkstra) {\n          const startNodeDistance = returnDijkstra.startNodeDistance;\n          const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n          this.animateDijkstra(returnDijkstra.visitedNodesInOrder, nodesInShortestPathOrder, startNodeDistance);\n          const timeEnd = performance.now();\n          let string = \"\";\n\n          if (startNodeDistance === null) {\n            string = \"and can't reach the target node, it's enclosed into a box!\";\n          } else {\n            string = \"and took \".concat(startNodeDistance, \" steps.\");\n          }\n\n          const algorithmTime = document.getElementById('algorithm-time');\n\n          if (algorithmTime) {\n            algorithmTime.innerHTML = \"Dijkstra's algorithm took \".concat((timeEnd - timeStart) / 1000, \" seconds to execute \").concat(string);\n          }\n        }\n      }\n    };\n\n    this.visualizeAstar = () => {\n      const grid = this.state.grid;\n\n      for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n          if (grid[i][j].isStart === true) {\n            this.setHTMLClass(\"node-\".concat(i, \"-\").concat(j), 'node node-img-start');\n          } else if (grid[i][j].isFinish === true) {\n            this.setHTMLClass(\"node-\".concat(i, \"-\").concat(j), 'node node-img-finish');\n          } else if (grid[i][j].isWall === true) {\n            this.setHTMLClass(\"node-\".concat(i, \"-\").concat(j), 'node node-wall');\n          } else {\n            this.setHTMLClass(\"node-\".concat(i, \"-\").concat(j), 'node');\n          }\n\n          grid[i][j].distance = Infinity;\n          grid[i][j].isVisited = false; //grid[i][j].isWall = false;\n\n          grid[i][j].previousNode = null;\n        }\n      }\n      /*\n      const timeStart = performance.now();\n      const startNode = grid[START_NODE_ROW][START_NODE_COL];\n      const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n      const returnAstar = astar(grid, startNode, finishNode, 8);\n      //const startNodeDistance = returnAstar.startNodeDistance;\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n      //this.animateDijkstra(returnAstar.visitedNodesInOrder, nodesInShortestPathOrder);\n      const timeEnd = performance.now();\n      */\n\n    };\n\n    this.generateScatterRandom = () => {\n      const _this$state2 = this.state,\n            grid = _this$state2.grid,\n            isAnimationRunning = _this$state2.isAnimationRunning;\n\n      if (!isAnimationRunning) {\n        const walledMaze = scatterRandom(grid);\n        this.setState({\n          grid: walledMaze\n        });\n      }\n    };\n\n    this.generateRandomMaze = () => {\n      /*console.log(walledMaze);\n      for(let i = 0; i < ROWS; i++){\n        for(let j = 0; j < COLS; j++){\n          if(walledMaze[0][i][j] === 1){\n            grid[i][j].isWall = true;\n          }else{\n            grid[i][j].isWall = false;\n          }\n          grid[i][j].isWall = false;\n          grid[i][j].isVisited = false;\n          grid[i][j].distance = Infinity;\n          grid[i][j].previousNode = null;\n        }\n      }*/\n    };\n\n    this.state = {\n      grid: [],\n      rightMouseIsPressed: false,\n      leftMouseIsPressed: false,\n      animationSpeed: 10,\n      isAnimationRunning: false\n    };\n  } ///////////////////////////////////////\n  // FUNCTION: PATHFINDINGVISUALIZER ON MOUNT\n  ///////////////////////////////////////\n\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n\n    window.onload = function () {\n      //TODO: Implement remove and add wall with this, and add drag\n      const nodes = document.querySelectorAll('.node');\n\n      for (let i = 0; i < nodes.length; i++) {\n        nodes[i].addEventListener('mouseenter', function (e) {\n          nodes[i].classList.add('node-hover');\n        });\n        nodes[i].addEventListener('mouseleave', function (e) {\n          nodes[i].classList.remove('node-hover');\n        });\n      }\n      /*\n      nodes[i].addEventListener('mousedown', function(e){\n        if(e.button === 0){\n          console.log(\"left\")\n          console.log(e.target.id)\n        }\n        else if(e.button === 2){\n          console.log(\"right\")\n        }\n        \n      })*/\n\n    };\n  } ///////////////////////////////////////\n  // FUNCTION: PATHFINDINGVISUALIZER ON STATE RELOAD AND UPDATE\n  ///////////////////////////////////////\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const grid = this.state.grid;\n    document.addEventListener('keypress', event => {\n      if (grid !== prevState.grid) {\n        if (event.key === 's') {\n          const nodeHoverList = document.getElementsByClassName('node-hover');\n          const nodeHTML = nodeHoverList[0];\n\n          if (nodeHTML) {\n            const oldStartNode = document.getElementById(\"node-\".concat(START_NODE_ROW, \"-\").concat(START_NODE_COL));\n\n            if (oldStartNode) {\n              oldStartNode.classList.remove('node-start');\n              grid[START_NODE_ROW][START_NODE_COL].isStart = false;\n            }\n\n            nodeHTML.classList.add('node-start');\n            nodeHTML.classList.remove('node-hover');\n            const row = nodeHTML.id.split('-')[1];\n            const col = nodeHTML.id.split('-')[2];\n            console.log(row, col); // grid[col][row].isStart = true;\n            // grid[col][row].isWall = false\n\n            START_NODE_ROW = parseInt(row);\n            START_NODE_COL = parseInt(col);\n          }\n        } else if (event.key === 'f') {\n          for (let i = 0; i < grid.length; i++) {\n            for (let j = 0; j < grid[i].length; j++) {\n              const nodeHTML = document.getElementById(\"node-\".concat(i, \"-\").concat(j));\n\n              if (nodeHTML && nodeHTML.classList.contains('node-hover')) {\n                const oldFinishNode = document.getElementById(\"node-\".concat(FINISH_NODE_ROW, \"-\").concat(FINISH_NODE_COL));\n\n                if (oldFinishNode) {\n                  oldFinishNode.classList.remove('node-finish');\n                  grid[FINISH_NODE_ROW][FINISH_NODE_COL].isFinish = false;\n                }\n\n                nodeHTML.classList.add('node-finish');\n                nodeHTML.classList.remove('node-hover');\n                grid[i][j].isFinish = true;\n                grid[i][j].isWall = false;\n                FINISH_NODE_ROW = i;\n                FINISH_NODE_COL = j;\n              }\n            }\n          }\n        }\n      }\n\n      this.setState({\n        grid: grid\n      });\n    });\n  }\n\n  handleMouseRightDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      rightMouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.rightMouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      rightMouseIsPressed: false\n    });\n  }\n\n  ///////////////////////////////////////\n  // FUNCTION: ANIMATE DIJKSTRA\n  ///////////////////////////////////////\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder, startNodeDistance) {\n    //TODO: Make the speed change as the button is pressed even with animation playing\n    const animationSpeed = this.state.animationSpeed;\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder, startNodeDistance);\n        }, animationSpeed * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n\n        if (node.isStart === true) {\n          this.setHTMLClass(\"node-\".concat(node.row, \"-\").concat(node.col), 'node node-visited node-img-start');\n        } else if (node.isFinish === true) {\n          this.setHTMLClass(\"node-\".concat(node.row, \"-\").concat(node.col), 'node node-visited node-img-finish');\n        } else {\n          this.setHTMLClass(\"node-\".concat(node.row, \"-\").concat(node.col), 'node node-visited');\n        }\n      }, animationSpeed * i);\n    }\n  } ///////////////////////////////////////\n  // FUNCTION: ANIMATE SHORTEST PATH \n  // BETWEEN START AND FINISH NODE\n  ///////////////////////////////////////\n\n\n  animateShortestPath(nodesInShortestPathOrder, startNodeDistance) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n\n        if (node.isStart === true) {\n          this.setHTMLClass(\"node-\".concat(node.row, \"-\").concat(node.col), 'node node-shortest-path-right node-img-start');\n        } else if (node.isFinish === true && startNodeDistance !== null) {\n          this.setHTMLClass(\"node-\".concat(node.row, \"-\").concat(node.col), 'node node-shortest-path-right node-img-finish');\n        } else {\n          if (node.isFinish !== true && startNodeDistance !== null) {\n            let prevNode = nodesInShortestPathOrder[i - 1];\n\n            if (prevNode !== undefined && prevNode !== null) {\n              const currentNode = nodesInShortestPathOrder[i];\n\n              if (currentNode.col > prevNode.col) {\n                this.setHTMLClass(\"node-\".concat(node.row, \"-\").concat(node.col), 'node node-shortest-path-right'); // moved a column to right\n              } else if (currentNode.col < prevNode.col) {\n                this.setHTMLClass(\"node-\".concat(node.row, \"-\").concat(node.col), 'node node-shortest-path-left'); // moved a column to left\n              } else if (currentNode.row > prevNode.row) {\n                this.setHTMLClass(\"node-\".concat(node.row, \"-\").concat(node.col), 'node node-shortest-path-down'); // moved a row down\n              } else if (currentNode.row < prevNode.row) {\n                this.setHTMLClass(\"node-\".concat(node.row, \"-\").concat(node.col), 'node node-shortest-path-up'); // moved a row up\n              }\n            }\n          }\n        }\n      }, 50 * i);\n    }\n\n    setTimeout(() => {\n      this.setState({\n        isAnimationRunning: false\n      });\n    }, 1000);\n  } ///////////////////////////////////////\n  // FUNCTION: CLEAR GRID\n  ///////////////////////////////////////\n\n\n  render() {\n    const grid = this.state.grid;\n    return React.createElement(React.Fragment, null, React.createElement(Navbar, {\n      changeAnimationSpeed: this.changeAnimationSpeed,\n      generateScatterRandom: this.generateScatterRandom,\n      visualizeAstar: this.visualizeAstar,\n      generateRandomMaze: this.generateRandomMaze,\n      clearGrid: this.clearGrid,\n      visualizeDijkstra: this.visualizeDijkstra,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, grid.map((row, rowIdx) => {\n      return React.createElement(\"div\", {\n        key: rowIdx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385\n        },\n        __self: this\n      }, row.map((node, nodeIdx) => {\n        const row = node.row,\n              col = node.col,\n              isFinish = node.isFinish,\n              isStart = node.isStart,\n              isWall = node.isWall;\n        return React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          onMouseDown: (row, col) => this.handleMouseRightDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 389\n          },\n          __self: this\n        });\n      }));\n    })), React.createElement(TextArea, {\n      secondaryText: \"Made by Neel Bansal\",\n      text: \"Dijkstra's algorithm is an algorithm for finding the shortest paths between nodes in a graph, it sets every nodes distance to Infinity, and then the main node searches up, down, left and right. It continues this throughout the execution. \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"note-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, React.createElement(Note, {\n      node: \"true\",\n      title: \"Unvisited Node\",\n      iconClass: \"node\",\n      text: \"This is not the start, finish, or wall node; it is a node that has not yet been visited. This is normally how the probram begins, with none of the nodes visited.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }), React.createElement(Note, {\n      node: \"true\",\n      title: \"Start / Source Node\",\n      iconClass: \"node-start\",\n      text: \"The start node is where the program begins its search; it will make that the primary node and work its way to the solution from there. This can be changed by pressing the \\\"s\\\" key over a node.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }), React.createElement(Note, {\n      node: \"true\",\n      title: \"Finish / Target Node\",\n      iconClass: \"node-finish\",\n      text: \"The finish node is the one that the program is looking for and will attempt to locate. It will give an error if it is unable to locate it. This can be changed by pressing the \\\"f\\\" key over a node.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }), React.createElement(Note, {\n      node: \"true\",\n      title: \"Wall Node\",\n      iconClass: \"node-wall\",\n      text: \"The wall nodes prevent the program from searching in that area; they can also be used to demonstrate how roads can prevent cars from entering a specific location.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }), React.createElement(Note, {\n      node: \"true\",\n      title: \"Visited Node\",\n      iconClass: \"node-visited\",\n      text: \"The visited node is the node that the program has visited. It is the node that the program is currently on.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }), React.createElement(Note, {\n      node: \"true\",\n      title: \"Shortest Path Node\",\n      iconClass: \"node-shortest-path-right\",\n      text: \"The node that the program has visited is the visited node. It's the node where the software looked for the target node previously.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }), React.createElement(Note, {\n      title: \"Grid\",\n      text: \"The grid is the area that the program searches. It is the area that the program searches for the target node.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: 'left',\n        padding: '50px 0px 0px 100px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        display: 'left',\n        padding: '0px 10px 0px 100px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        display: 'left',\n        padding: '0px 10px 30px 100px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    })))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }));\n  } ///////////////////////////////////////\n  // FUNCTION: GENERATE SCATTER RANDOM\n  ///////////////////////////////////////\n\n\n} ///////////////////////////////////////\n// CLASS: NAVBAR\n///////////////////////////////////////\n\nclass Navbar extends Component {\n  render() {\n    let clearGrid = this.props.clearGrid;\n    let visualizeDijkstra = this.props.visualizeDijkstra; //let generateRandomMaze = this.props.generateRandomMaze;    \n    //let visualizeAstar = this.props.visualizeAstar;\n\n    let generateScatterRandom = this.props.generateScatterRandom;\n    let changeAnimationSpeed = this.props.changeAnimationSpeed;\n    return React.createElement(\"div\", {\n      className: \"navbar-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"navbar navbar-dark navbar-expand justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"navbar-nav nav-justified w-100 text-center mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"nav-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#!\",\n      className: \"nav-link d-flex flex-column\",\n      \"data-toggle\": \"collapse\",\n      onClick: () => visualizeDijkstra(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"fa fa-map-marker fa-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"d-none d-sm-inline mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }, \"Dijkstra's Algorithm\"))), React.createElement(\"li\", {\n      className: \"nav-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#!\",\n      className: \"nav-link d-flex flex-column\",\n      \"data-toggle\": \"collapse\",\n      onClick: () => generateScatterRandom(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"fa fa-question fa-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"d-none d-sm-inline mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, \"Generate Scatter\"))), React.createElement(\"li\", {\n      className: \"nav-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#!\",\n      className: \"nav-link d-flex flex-column\",\n      \"data-toggle\": \"collapse\",\n      onClick: () => changeAnimationSpeed(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"fa fa-fast-forward fa-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      id: \"change-speed\",\n      className: \"d-none d-sm-inline mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, \"Change Speed\"))), React.createElement(\"li\", {\n      className: \"nav-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#!\",\n      className: \"nav-link d-flex flex-column\",\n      \"data-toggle\": \"collapse\",\n      onClick: () => clearGrid(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"fa fa-th fa-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"d-none d-sm-inline mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, \"Clear Grid\")))))));\n  }\n\n}\n\nclass Note extends Component {\n  render() {\n    const title = this.props.title;\n    const text = this.props.text;\n    const iconClass = this.props.iconClass;\n    const node = this.props.node;\n    let nodeDiv;\n\n    if (node) {\n      nodeDiv = React.createElement(\"div\", {\n        style: {\n          width: '25px',\n          height: '25px',\n          outline: '1px solid rgb(175, 216, 248)',\n          display: 'flex',\n          margin: '15% 45%',\n          justifyContent: 'center',\n          alignItems: 'center',\n          verticalAlign: 'text-bottom'\n        },\n        className: iconClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548\n        },\n        __self: this\n      });\n    } else {\n      nodeDiv = null;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"note-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card\",\n      style: {\n        width: \"18rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, this.props.children, nodeDiv, React.createElement(\"div\", {\n      className: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"card-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, title), React.createElement(\"p\", {\n      className: \"card-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, text))));\n  }\n\n} ///////////////////////////////////////\n// CLASS: TEXTAREA\n///////////////////////////////////////\n\n\nclass TextArea extends Component {\n  render() {\n    const text = this.props.text;\n    const secondaryText = this.props.secondaryText;\n    return React.createElement(\"div\", {\n      className: \"note-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"note\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }, text), React.createElement(\"p\", {\n      id: \"algorithm-time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }), React.createElement(\"h6\", {\n      style: {\n        fontWeight: 'normal'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }, secondaryText)));\n  }\n\n} ///////////////////////////////////////\n// FUNCTION: GET INITIAL GRID\n///////////////////////////////////////\n\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < ROWS; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < COLS; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n}; ///////////////////////////////////////\n// FUNCTION: CREATE NODE\n///////////////////////////////////////\n\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n\n  const newNode = _objectSpread({}, node, {\n    isWall: !node.isWall\n  });\n\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["C:\\Users\\GAMER\\Desktop\\Pathfinding-Visualizer\\src\\PathfindingVisualizer\\PathfindingVisualizer.tsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","scatterRandom","$","windowWidth","window","width","windowHeight","height","innerWidth","innerHeight","rows","Math","floor","columns","ROWS","COLS","START_NODE_COL","START_NODE_ROW","FINISH_NODE_COL","FINISH_NODE_ROW","on","location","reload","PathfindingVisualizer","constructor","props","setHTMLClass","node","classNameString","element","document","getElementById","classNameArray","split","forEach","className","classList","add","console","log","clearGrid","grid","state","algorithmTime","innerHTML","i","length","j","nodeHTML","row","col","isVisited","isWall","distance","Infinity","previousNode","isStart","isFinish","changeAnimationSpeed","animationSpeed","setState","visualizeDijkstra","isAnimationRunning","timeStart","performance","now","startNode","finishNode","returnDijkstra","startNodeDistance","nodesInShortestPathOrder","animateDijkstra","visitedNodesInOrder","timeEnd","string","visualizeAstar","generateScatterRandom","walledMaze","generateRandomMaze","rightMouseIsPressed","leftMouseIsPressed","componentDidMount","getInitialGrid","onload","nodes","querySelectorAll","addEventListener","e","remove","componentDidUpdate","prevProps","prevState","event","key","nodeHoverList","getElementsByClassName","oldStartNode","id","parseInt","contains","oldFinishNode","handleMouseRightDown","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","setTimeout","animateShortestPath","prevNode","undefined","currentNode","render","map","rowIdx","nodeIdx","display","padding","outline","margin","justifyContent","alignItems","verticalAlign","Navbar","Note","title","text","iconClass","nodeDiv","children","TextArea","secondaryText","fontWeight","currentRow","push","createNode","slice","newNode"],"mappings":"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","sourcesContent":["///////////////////////////////////////\n// IMPORTING MODULES\n///////////////////////////////////////\n\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport './PathfindingVisualizer.css';\nimport scatterRandom from '../algorithms/scatterRandom';\nimport $ from 'jquery';\n\n\nlet windowWidth = $(window).width() ;\nlet windowHeight = $(window).height();\nif(!windowWidth){windowWidth = window.innerWidth;}\nif(!windowHeight){windowHeight = window.innerHeight;}\n\nlet rows = Math.floor(windowHeight / 50);\nlet columns = Math.floor(windowWidth / 30);\n\nlet ROWS = rows; //16\nlet COLS = columns; //50\nlet START_NODE_COL = Math.floor(COLS / 2.5);\nlet START_NODE_ROW = Math.floor(ROWS / 2);\nlet FINISH_NODE_COL = Math.floor(COLS / 1.5);\nlet FINISH_NODE_ROW = Math.floor(ROWS / 2);\n\n\n$(window).on('resize', function(){\n  window.location.reload();\n})\n\n///////////////////////////////////////\n// CLASS: PATHFINDINGVISUALIZER\n///////////////////////////////////////\n\ninterface PathfindingVisualizerProps {\n  grid: Array<Array<Node>>;\n  rightMouseIsPressed: boolean;\n  leftMouseIsPressed: boolean;\n  isAnimationRunning: boolean;\n  animationSpeed: number; \n}\n\nexport default class PathfindingVisualizer extends Component <any, any>{\n  constructor(props: PathfindingVisualizerProps) {\n    super(props);\n    this.state = {\n      grid: [],\n      rightMouseIsPressed: false,\n      leftMouseIsPressed: false,\n      animationSpeed: 10,\n      isAnimationRunning: false,\n    };\n  }\n\n  ///////////////////////////////////////\n  // FUNCTION: PATHFINDINGVISUALIZER ON MOUNT\n  ///////////////////////////////////////\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n    window.onload = function(){\n      //TODO: Implement remove and add wall with this, and add drag\n      \n      const nodes = document.querySelectorAll('.node')\n      for(let i = 0; i < nodes.length; i++){\n        nodes[i].addEventListener('mouseenter', function(e){\n          nodes[i].classList.add('node-hover');\n        })\n        nodes[i].addEventListener('mouseleave', function(e){\n          nodes[i].classList.remove('node-hover');\n        })\n      }\n        /*\n        nodes[i].addEventListener('mousedown', function(e){\n          if(e.button === 0){\n            console.log(\"left\")\n            console.log(e.target.id)\n          }\n          else if(e.button === 2){\n            console.log(\"right\")\n          }\n          \n        })*/\n      }\n    }\n    \n  ///////////////////////////////////////\n  // FUNCTION: PATHFINDINGVISUALIZER ON STATE RELOAD AND UPDATE\n  ///////////////////////////////////////\n  componentDidUpdate(prevProps : any, prevState : any){\n    const { grid }  = this.state;\n\n    document.addEventListener('keypress', (event) => {\n      if (grid !== prevState.grid) {\n        if (event.key === 's') {\n          const nodeHoverList = document.getElementsByClassName('node-hover');\n                const nodeHTML = nodeHoverList[0];\n                if(nodeHTML){\n                  const oldStartNode = document.getElementById(`node-${START_NODE_ROW}-${START_NODE_COL}`);\n                  if(oldStartNode){\n\n                    oldStartNode.classList.remove('node-start');\n                    grid[START_NODE_ROW][START_NODE_COL].isStart = false;\n                  }\n                  \n                  nodeHTML.classList.add('node-start');\n                  nodeHTML.classList.remove('node-hover');\n                  const row = nodeHTML.id.split('-')[1];\n                  const col = nodeHTML.id.split('-')[2];\n                  console.log(row, col)\n                  // grid[col][row].isStart = true;\n                  // grid[col][row].isWall = false\n                  \n                  START_NODE_ROW = parseInt(row);\n                  START_NODE_COL = parseInt(col);\n                }\n\n          }else if (event.key === 'f') {\n            for(let i = 0; i < grid.length; i++){\n              for(let j = 0; j < grid[i].length; j++){\n                const nodeHTML = document.getElementById(`node-${i}-${j}`);\n                if(nodeHTML && nodeHTML.classList.contains('node-hover')){\n                  const oldFinishNode = document.getElementById(`node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`);\n                  if(oldFinishNode){\n                    oldFinishNode.classList.remove('node-finish');\n                    grid[FINISH_NODE_ROW][FINISH_NODE_COL].isFinish = false;\n                  }\n                  nodeHTML.classList.add('node-finish');\n                  nodeHTML.classList.remove('node-hover');\n                  grid[i][j].isFinish = true;\n                  grid[i][j].isWall = false;\n\n                  FINISH_NODE_ROW = i;\n                  FINISH_NODE_COL = j;  \n\n\n                }\n              }\n            }\n          }\n      }\n      this.setState({ grid: grid });\n    }\n  );\n}\n\n  handleMouseRightDown(row : number, col : number) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, rightMouseIsPressed: true});\n  }\n\n\n  handleMouseEnter(row : number, col : number) {\n    if (!this.state.rightMouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({rightMouseIsPressed: false});\n  }\n\n  setHTMLClass = (node : string, classNameString : string) => {\n    const element = document.getElementById(node);\n    if(element){\n      const classNameArray = classNameString.split(' ');\n      classNameArray.forEach(className => {\n        element.classList.add(className);\n        }); \n    } else {\n      console.log(\"element not found\")\n    }\n  }\n\n  ///////////////////////////////////////\n  // FUNCTION: ANIMATE DIJKSTRA\n  ///////////////////////////////////////\n  animateDijkstra(visitedNodesInOrder: Array<any>, nodesInShortestPathOrder: Array<any>, startNodeDistance : number) {\n      //TODO: Make the speed change as the button is pressed even with animation playing\n      const { animationSpeed } = this.state;\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n            this.animateShortestPath(nodesInShortestPathOrder, startNodeDistance);\n          }, animationSpeed * i);\n          return;\n        }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          if(node.isStart === true){\n            this.setHTMLClass(`node-${node.row}-${node.col}`, 'node node-visited node-img-start');\n          }else if(node.isFinish === true){\n            this.setHTMLClass(`node-${node.row}-${node.col}`, 'node node-visited node-img-finish');\n          }else{\n            this.setHTMLClass(`node-${node.row}-${node.col}`, 'node node-visited');\n          }\n        }, animationSpeed * i);\n    }\n\n  }\n\n  ///////////////////////////////////////\n  // FUNCTION: ANIMATE SHORTEST PATH \n  // BETWEEN START AND FINISH NODE\n  ///////////////////////////////////////\n  animateShortestPath(nodesInShortestPathOrder : Array<any>, startNodeDistance : any) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        if(node.isStart === true){\n          this.setHTMLClass(`node-${node.row}-${node.col}`, 'node node-shortest-path-right node-img-start');\n        }else if(node.isFinish === true && startNodeDistance !== null){\n          this.setHTMLClass(`node-${node.row}-${node.col}`, 'node node-shortest-path-right node-img-finish');\n        }else{\n          if(node.isFinish !== true && startNodeDistance !== null){\n            let prevNode = nodesInShortestPathOrder[i - 1];\n              if(prevNode !== undefined && prevNode !== null){\n                const currentNode = nodesInShortestPathOrder[i];\n                if(currentNode.col > prevNode.col){\n                  this.setHTMLClass(`node-${node.row}-${node.col}`, 'node node-shortest-path-right');\n                  // moved a column to right\n                }else if(currentNode.col < prevNode.col){\n                  this.setHTMLClass(`node-${node.row}-${node.col}`, 'node node-shortest-path-left');\n                  // moved a column to left\n                }else if(currentNode.row > prevNode.row){\n                  this.setHTMLClass(`node-${node.row}-${node.col}`, 'node node-shortest-path-down');\n                  // moved a row down\n                }else if(currentNode.row < prevNode.row){\n                  this.setHTMLClass(`node-${node.row}-${node.col}`, 'node node-shortest-path-up');\n                  // moved a row up\n                }\n              }\n            }\n          }\n        }, 50 * i);\n    }\n\n    setTimeout(() => {\n      this.setState({isAnimationRunning: false});\n    }, 1000)\n  }\n\n  ///////////////////////////////////////\n  // FUNCTION: CLEAR GRID\n  ///////////////////////////////////////\n  clearGrid = () => {\n    const { grid } = this.state;\n    const algorithmTime = document.getElementById('algorithm-time');\n    if(algorithmTime){\n      algorithmTime.innerHTML = '';\n    }\n\n    for(let i  = 0; i < grid.length; i++){\n      for(let j = 0; j < grid[0].length; j++){\n        const node = grid[i][j];\n        const nodeHTML = document.getElementById(`node-${node.row}-${node.col}`);\n        node.isVisited = false;\n        node.isWall = false;\n        node.distance = Infinity;\n        node.previousNode = null;\n        if(nodeHTML){\n          if(node.isStart === true){\n            nodeHTML.className = 'node node-img-start';\n          }else if(grid[i][j].isFinish === true){\n            nodeHTML.className = 'node node-img-finish';\n          }else if(grid[i][j].isWall === true){\n            nodeHTML.className = 'node node-wall';\n          }else{\n            nodeHTML.className = 'node';\n          }\n        }\n      }\n    }\n  }\n\n  changeAnimationSpeed = () => {\n    const animationSpeed = document.getElementById('change-speed');\n    if(animationSpeed){ \n      console.log(animationSpeed.innerHTML);\n      if(animationSpeed.innerHTML === 'Slow' || animationSpeed.innerHTML === 'Change Speed'){\n        animationSpeed.innerHTML = 'Medium';\n        this.setState({animationSpeed: 40});\n      }else if(animationSpeed.innerHTML === 'Medium'){\n        animationSpeed.innerHTML = 'Fast';\n        this.setState({animationSpeed: 10});\n      }else if(animationSpeed.innerHTML === 'Fast'){\n        animationSpeed.innerHTML = 'Slow';\n        this.setState({animationSpeed: 90});\n      }\n    }\n  };\n\n  ///////////////////////////////////////\n  // FUNCTION: VISUALIZE DIJKSTRA\n  ///////////////////////////////////////\n  visualizeDijkstra = () => {\n    const { grid, isAnimationRunning } = this.state;\n    if(isAnimationRunning === false){\n      this.setState({isAnimationRunning: true});\n      for(let i  = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n          const nodeHTML = document.getElementById(`node-${i}-${j}`);\n          if(nodeHTML){\n            if(grid[i][j].isStart === true){\n              nodeHTML.className = 'node node-img-start';\n            }else if(grid[i][j].isFinish === true){\n              nodeHTML.className = 'node node-img-finish';\n            }else if(grid[i][j].isWall === true){\n              nodeHTML.className = 'node node-wall';\n            }else{\n              nodeHTML.className = 'node';\n            }\n            grid[i][j].distance = Infinity;\n            grid[i][j].isVisited = false;\n            grid[i][j].previousNode = null;\n        }\n          }\n        }    \n\n      const timeStart = performance.now();\n      const startNode = grid[START_NODE_ROW][START_NODE_COL];\n      const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n      const returnDijkstra = dijkstra(grid, startNode, finishNode);\n      if(returnDijkstra){\n        const startNodeDistance = returnDijkstra.startNodeDistance;\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(returnDijkstra.visitedNodesInOrder, nodesInShortestPathOrder, startNodeDistance);\n        const timeEnd = performance.now();\n        let string = \"\"\n        if(startNodeDistance === null){\n          string = \"and can't reach the target node, it's enclosed into a box!\"\n        }else{\n          string = `and took ${startNodeDistance} steps.`\n        }\n        const algorithmTime = document.getElementById('algorithm-time');  \n        if(algorithmTime){\n          algorithmTime.innerHTML = `Dijkstra's algorithm took ${(timeEnd - timeStart) / 1000} seconds to execute ${string}`;\n        }\n      }\n    }\n  }\n  \n\n  visualizeAstar = () => {\n    const { grid } = this.state;\n    for(let i  = 0; i < grid.length; i++){\n      for(let j = 0; j < grid[i].length; j++){\n        if(grid[i][j].isStart === true){\n          this.setHTMLClass(`node-${i}-${j}`, 'node node-img-start');\n        }else if(grid[i][j].isFinish === true){\n          this.setHTMLClass(`node-${i}-${j}`, 'node node-img-finish');\n        }else if(grid[i][j].isWall === true){\n          this.setHTMLClass(`node-${i}-${j}`, 'node node-wall');\n        }else{\n          this.setHTMLClass(`node-${i}-${j}`, 'node');\n        }\n        grid[i][j].distance = Infinity;\n        grid[i][j].isVisited = false;\n        //grid[i][j].isWall = false;\n        grid[i][j].previousNode = null;\n        }\n      }\n      /*\n    const timeStart = performance.now();\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const returnAstar = astar(grid, startNode, finishNode, 8);\n    //const startNodeDistance = returnAstar.startNodeDistance;\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    //this.animateDijkstra(returnAstar.visitedNodesInOrder, nodesInShortestPathOrder);\n    const timeEnd = performance.now();\n    */\n  }\n\n  render() {\n    const { grid } = this.state;\n    return (\n      <>\n        <Navbar changeAnimationSpeed={this.changeAnimationSpeed} generateScatterRandom={this.generateScatterRandom} visualizeAstar={this.visualizeAstar} generateRandomMaze={this.generateRandomMaze} clearGrid={this.clearGrid} visualizeDijkstra={this.visualizeDijkstra}/>\n        <div className=\"grid\">\n          {grid.map((row : any, rowIdx : number) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node : any, nodeIdx : number) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      onMouseDown={(row : number, col : number) => this.handleMouseRightDown(row, col)}\n                      onMouseEnter={(row : number, col : number) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        \n        <TextArea secondaryText=\"Made by Neel Bansal\" text=\"Dijkstra's algorithm is an algorithm for finding the shortest paths between nodes in a graph, it sets every nodes distance to Infinity, and then the main node searches up, down, left and right. It continues this throughout the execution. \"/>\n        <div className='note-wrapper'>   \n          <Note node=\"true\" title='Unvisited Node' iconClass='node' text='This is not the start, finish, or wall node; it is a node that has not yet been visited. This is normally how the probram begins, with none of the nodes visited.'/>\n          <Note node=\"true\" title='Start / Source Node' iconClass='node-start' text='The start node is where the program begins its search; it will make that the primary node and work its way to the solution from there. This can be changed by pressing the \"s\" key over a node.'/>\n          <Note node=\"true\" title='Finish / Target Node' iconClass='node-finish' text='The finish node is the one that the program is looking for and will attempt to locate. It will give an error if it is unable to locate it. This can be changed by pressing the \"f\" key over a node.'/>\n          <Note node=\"true\" title='Wall Node' iconClass='node-wall' text='The wall nodes prevent the program from searching in that area; they can also be used to demonstrate how roads can prevent cars from entering a specific location.'/>\n          <Note node=\"true\" title='Visited Node' iconClass='node-visited' text='The visited node is the node that the program has visited. It is the node that the program is currently on.'/>\n          <Note node=\"true\" title='Shortest Path Node' iconClass='node-shortest-path-right' text=\"The node that the program has visited is the visited node. It's the node where the software looked for the target node previously.\"/>\n          <Note title=\"Grid\" text='The grid is the area that the program searches. It is the area that the program searches for the target node.'>\n            <div style={{display: 'left', padding: '50px 0px 0px 100px'}}>\n              <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n              <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n              <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n            </div>\n\n          <div style={{display: 'left', padding: '0px 10px 0px 100px'}}>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n          </div>\n          <div style={{display: 'left', padding: '0px 10px 30px 100px'}}>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n          </div> \n          </Note>\n        </div>\n        <br></br>\n        </>\n    );\n  }\n\n\n  ///////////////////////////////////////\n  // FUNCTION: GENERATE SCATTER RANDOM\n  ///////////////////////////////////////\n  \n  generateScatterRandom = () =>{\n    const { grid, isAnimationRunning } = this.state;\n    if(!isAnimationRunning){\n      const walledMaze = scatterRandom(grid)\n      this.setState({\n        grid: walledMaze\n      })\n  }\n  }\n  \n  generateRandomMaze = () => {\n    /*console.log(walledMaze);\n    for(let i = 0; i < ROWS; i++){\n      for(let j = 0; j < COLS; j++){\n        if(walledMaze[0][i][j] === 1){\n          grid[i][j].isWall = true;\n        }else{\n          grid[i][j].isWall = false;\n        }\n        grid[i][j].isWall = false;\n        grid[i][j].isVisited = false;\n        grid[i][j].distance = Infinity;\n        grid[i][j].previousNode = null;\n      }\n    }*/\n      }\n}\n\n///////////////////////////////////////\n// CLASS: NAVBAR\n///////////////////////////////////////\n\ninterface NavbarProps {\n  clearGrid: any; \n  visualizeDijkstra : any;\n  generateRandomMaze : any;\n  visualizeAstar : any;\n  generateScatterRandom  : any;\n  changeAnimationSpeed : any;\n} \n\nclass Navbar extends Component <NavbarProps> {\n  render() {\n    let clearGrid = this.props.clearGrid;\n    let visualizeDijkstra = this.props.visualizeDijkstra; \n    //let generateRandomMaze = this.props.generateRandomMaze;    \n    //let visualizeAstar = this.props.visualizeAstar;\n    let generateScatterRandom = this.props.generateScatterRandom;\n    let changeAnimationSpeed = this.props.changeAnimationSpeed;\n    return (\n      <div className=\"navbar-wrapper\">\n      <nav className=\"navbar navbar-dark navbar-expand justify-content-center\">\n    <div className=\"container\">\n        <ul className=\"navbar-nav nav-justified w-100 text-center mt-1\">\n        <li className=\"nav-item\">\n                <a href=\"#!\" className=\"nav-link d-flex flex-column\" data-toggle=\"collapse\" onClick={() => visualizeDijkstra()}>\n                    <span className=\"fa fa-map-marker fa-lg\"></span>\n                    <span className=\"d-none d-sm-inline mt-1\">Dijkstra's Algorithm</span>\n                </a>\n            </li> \n            <li className=\"nav-item\">\n                <a href=\"#!\" className=\"nav-link d-flex flex-column\" data-toggle=\"collapse\" onClick={() => generateScatterRandom()}>\n                    <span className=\"fa fa-question fa-lg\"></span>\n                    <span className=\"d-none d-sm-inline mt-1\">Generate Scatter</span>\n                </a>\n            </li>\n            <li className=\"nav-item\">\n                <a href=\"#!\" className=\"nav-link d-flex flex-column\" data-toggle=\"collapse\" onClick={() => changeAnimationSpeed()}>\n                    <span className=\"fa fa-fast-forward fa-lg\"></span>\n                    <span id=\"change-speed\" className=\"d-none d-sm-inline mt-1\">Change Speed</span>\n                </a>\n            </li>\n            <li className=\"nav-item\">\n                <a href=\"#!\" className=\"nav-link d-flex flex-column\" data-toggle=\"collapse\" onClick={() => clearGrid()}>\n                    <span className=\"fa fa-th fa-lg\"></span>\n                    <span className=\"d-none d-sm-inline mt-1\">Clear Grid</span>\n                </a>\n            </li>\n        </ul>\n    </div>\n</nav>  \n</div>\n      \n    );\n  }\n}\ninterface NoteProps{\n  title?: string;\n  text?: string;\n  iconClass?: string;\n  node?: string;\n  children?: any;\n}\n\nclass Note extends Component <NoteProps>{\n  \n  render() {\n    const title = this.props.title;\n    const text = this.props.text;\n    const iconClass = this.props.iconClass;\n    const node = this.props.node;\n    let nodeDiv;\n    if(node){\n      nodeDiv = <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'flex', margin: '15% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className={iconClass}></div>\n    }else{\n      nodeDiv = null;\n    }\n\n    return (\n      <div className=\"note-wrapper\">\n      <div className=\"card\" style={{width: \"18rem\"}}>\n        {this.props.children}\n        {nodeDiv}\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{title}</h5>\n          <p className=\"card-text\">{text}</p>\n        </div>\n      </div>\n      </div>\n    );\n    }\n}\n\n///////////////////////////////////////\n// CLASS: TEXTAREA\n///////////////////////////////////////\n\ninterface TextAreaProps {\n  text: string;\n  secondaryText?: string;\n}\n\nclass TextArea extends Component <TextAreaProps> {\n  render() {\n    const text = this.props.text\n    const secondaryText = this.props.secondaryText\n    return (\n      <div className=\"note-wrapper\">\n        <div className=\"note\">\n          <p>{text}</p>\n          <p id=\"algorithm-time\"></p>\n          <h6 style={{fontWeight: 'normal'}}>{secondaryText}</h6>\n          </div>\n      </div>\n    );\n  }\n}\n\n///////////////////////////////////////\n// FUNCTION: GET INITIAL GRID\n///////////////////////////////////////\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < ROWS; row++) {\n    const currentRow = [];\n    for (let col = 0; col < COLS; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\n///////////////////////////////////////\n// FUNCTION: CREATE NODE\n///////////////////////////////////////\nconst createNode = (col : number, row : number) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid: Array<any>, row : number, col : number) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n"]},"metadata":{},"sourceType":"module"}