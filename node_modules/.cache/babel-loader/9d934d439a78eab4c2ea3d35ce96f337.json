{"ast":null,"code":"// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\n///////////////////////////////////////\n// FUNCTION: DIKSTRA'S ALGORITHM\n///////////////////////////////////////\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift(); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    if (closestNode.distance === Infinity) return {\n      visitedNodesInOrder: visitedNodesInOrder,\n      startNodeDistance: null\n    };\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return {\n      visitedNodesInOrder: visitedNodesInOrder,\n      startNodeDistance: closestNode.distance\n    };\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  console.log(grid);\n  const neighbors = [];\n  const col = node.col,\n        row = node.row;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["C:\\Users\\GAMER\\Desktop\\Pathfinding-Visualizer\\src\\algorithms\\dijkstra.tsx"],"names":["dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","startNodeDistance","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","console","log","neighbors","col","row","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["\n// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\n\n///////////////////////////////////////\n// FUNCTION: DIKSTRA'S ALGORITHM\n///////////////////////////////////////\n\ninterface nodesObject {\n  col: number,\n  row: number,\n  isVisited: boolean,\n  isWall: boolean,\n  distance: number,\n  previousNode: any,\n  isStart: boolean,\n  isFinish: boolean,\n}\n\nexport function dijkstra(grid : Array<Object>, startNode: nodesObject, finishNode: nodesObject) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    \n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return {visitedNodesInOrder: visitedNodesInOrder, startNodeDistance: null};\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return {visitedNodesInOrder: visitedNodesInOrder, startNodeDistance: closestNode.distance};\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes : Array<nodesObject>) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node : nodesObject, grid : Array<Object>) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node : nodesObject, grid : any){\n  console.log(grid)\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid : Array<any>) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode: any) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n"]},"metadata":{},"sourceType":"module"}