{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\GAMER\\\\Desktop\\\\Pathfinding-Visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\GAMER\\\\Desktop\\\\Pathfinding-Visualizer\\\\src\\\\PathfindingVisualizer\\\\PathfindingVisualizer.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n///////////////////////////////////////\n// IMPORTING MODULES\n///////////////////////////////////////\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport astar from '../algorithms/astar';\nimport './PathfindingVisualizer.css';\nimport scatterRandom from '../algorithms/scatterRandom';\nimport $ from 'jquery';\nlet windowWidth = $(window).width();\nlet windowHeight = $(window).height();\nlet rows = Math.floor(windowHeight / 50);\nlet columns = Math.floor(windowWidth / 30);\nlet ROWS = rows; //16\n\nlet COLS = columns; //50\n\nlet START_NODE_COL = Math.floor(COLS / 2.5);\nlet START_NODE_ROW = Math.floor(ROWS / 2);\nlet FINISH_NODE_COL = Math.floor(COLS / 1.5);\nlet FINISH_NODE_ROW = Math.floor(ROWS / 2);\n$(window).on('resize', function () {\n  /*\n  let windowWidth = $(window).width();\n    let windowHeight = $(window).height();\n    let rows = Math.floor(windowHeight / 50);\n    let columns = Math.floor(windowWidth / 30);\n    ROWS = rows; //16\n    COLS = columns; //50\n    START_NODE_COL = Math.floor(COLS / 2.5);\n    START_NODE_ROW = Math.floor(ROWS / 2);\n    FINISH_NODE_COL = Math.floor(COLS / 1.5);\n    FINISH_NODE_ROW = Math.floor(ROWS / 2);\n  console.log(START_NODE_COL, START_NODE_ROW);\n  \n  */\n  window.location.reload();\n}); ///////////////////////////////////////\n// CLASS: PATHFINDINGVISUALIZER\n///////////////////////////////////////\n\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.clearGrid = () => {\n      const grid = this.state.grid;\n      document.getElementById('algorithm-time').innerHTML = '';\n\n      for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[0].length; j++) {\n          grid[i][j].isVisited = false;\n          grid[i][j].isWall = false;\n          grid[i][j].distance = Infinity;\n          grid[i][j].previousNode = null;\n\n          if (grid[i][j].isStart === true) {\n            document.getElementById(\"node-\".concat(i, \"-\").concat(j)).className = 'node node-img-start';\n          } else if (grid[i][j].isFinish === true) {\n            document.getElementById(\"node-\".concat(i, \"-\").concat(j)).className = 'node node-img-finish';\n          } else if (grid[i][j].isWall === true) {\n            document.getElementById(\"node-\".concat(i, \"-\").concat(j)).className = 'node node-wall';\n          } else {\n            document.getElementById(\"node-\".concat(i, \"-\").concat(j)).className = 'node';\n          }\n        }\n      }\n    };\n\n    this.visualizeDijkstra = () => {\n      const grid = this.state.grid;\n\n      for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n          if (grid[i][j].isStart === true) {\n            document.getElementById(\"node-\".concat(i, \"-\").concat(j)).className = 'node node-img-start';\n          } else if (grid[i][j].isFinish === true) {\n            document.getElementById(\"node-\".concat(i, \"-\").concat(j)).className = 'node node-img-finish';\n          } else if (grid[i][j].isWall === true) {\n            document.getElementById(\"node-\".concat(i, \"-\").concat(j)).className = 'node node-wall';\n          } else {\n            document.getElementById(\"node-\".concat(i, \"-\").concat(j)).className = 'node';\n          }\n\n          grid[i][j].distance = Infinity;\n          grid[i][j].isVisited = false;\n          grid[i][j].previousNode = null;\n        }\n      }\n\n      const timeStart = performance.now();\n      const startNode = grid[START_NODE_ROW][START_NODE_COL];\n      const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n      const returnDijkstra = dijkstra(grid, startNode, finishNode);\n      const startNodeDistance = returnDijkstra.startNodeDistance;\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n      this.animateDijkstra(returnDijkstra.visitedNodesInOrder, nodesInShortestPathOrder, startNodeDistance);\n      const timeEnd = performance.now();\n      let string = \"\";\n\n      if (startNodeDistance === null) {\n        string = \"and can't reach the target node, it's enclosed into a box!\";\n      } else {\n        string = \"and took \".concat(startNodeDistance, \" steps.\");\n      }\n\n      document.getElementById('algorithm-time').innerHTML = \"Dijkstra's algorithm took \".concat((timeEnd - timeStart) / 1000, \" seconds to execute \").concat(string);\n    };\n\n    this.visualizeAstar = () => {\n      const grid = this.state.grid;\n\n      for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n          if (grid[i][j].isStart === true) {\n            document.getElementById(\"node-\".concat(i, \"-\").concat(j)).className = 'node node-img-start';\n          } else if (grid[i][j].isFinish === true) {\n            document.getElementById(\"node-\".concat(i, \"-\").concat(j)).className = 'node node-img-finish';\n          } else if (grid[i][j].isWall === true) {\n            document.getElementById(\"node-\".concat(i, \"-\").concat(j)).className = 'node node-wall';\n          } else {\n            document.getElementById(\"node-\".concat(i, \"-\").concat(j)).className = 'node';\n          }\n\n          grid[i][j].distance = Infinity;\n          grid[i][j].isVisited = false; //grid[i][j].isWall = false;\n\n          grid[i][j].previousNode = null;\n        }\n      }\n\n      const timeStart = performance.now();\n      const startNode = grid[START_NODE_ROW][START_NODE_COL];\n      const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n      const returnAstar = astar(grid, startNode, finishNode, 8);\n      const startNodeDistance = returnAstar.startNodeDistance;\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n      this.animateDijkstra(returnAstar.visitedNodesInOrder, nodesInShortestPathOrder);\n      const timeEnd = performance.now();\n    };\n\n    this.generateScatterRandom = () => {\n      const grid = this.state.grid;\n      const walledMaze = scatterRandom(grid);\n      this.setState({\n        grid: walledMaze\n      });\n    };\n\n    this.generateRandomMaze = () => {\n      /*console.log(walledMaze);\n      for(let i = 0; i < ROWS; i++){\n        for(let j = 0; j < COLS; j++){\n          if(walledMaze[0][i][j] === 1){\n            grid[i][j].isWall = true;\n          }else{\n            grid[i][j].isWall = false;\n          }\n          grid[i][j].isWall = false;\n          grid[i][j].isVisited = false;\n          grid[i][j].distance = Infinity;\n          grid[i][j].previousNode = null;\n        }\n      }*/\n    };\n\n    this.state = {\n      grid: [],\n      rightMouseIsPressed: false,\n      leftMouseIsPressed: false\n    };\n  } ///////////////////////////////////////\n  // FUNCTION: PATHFINDINGVISUALIZER ON MOUNT\n  ///////////////////////////////////////\n\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n\n    window.onload = function () {\n      //TODO: Implement remove and add wall with this, and add drag\n      const nodes = document.querySelectorAll('.node');\n\n      for (let i = 0; i < nodes.length; i++) {\n        nodes[i].addEventListener('mouseenter', function (e) {\n          nodes[i].classList.add('node-hover');\n        });\n        nodes[i].addEventListener('mouseleave', function (e) {\n          nodes[i].classList.remove('node-hover');\n        });\n        nodes[i].addEventListener('mousedown', function (e) {\n          if (e.button === 0) {\n            console.log(\"left\");\n            console.log(e.target.id);\n          } else if (e.button === 2) {\n            console.log(\"right\");\n          }\n        });\n      }\n    };\n  } ///////////////////////////////////////\n  // FUNCTION: PATHFINDINGVISUALIZER ON STATE RELOAD AND UPDATE\n  ///////////////////////////////////////\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const grid = this.state.grid; //write an arrow function to get the key pressed\n\n    document.addEventListener('keypress', event => {\n      if (grid !== prevState.grid) {\n        if (event.key === 's') {\n          const newGrid = grid;\n          setTimeout(() => {\n            this.setState({\n              grid: newGrid\n            });\n            console.log(\"set state\");\n          }, 600);\n        }\n      }\n    });\n  }\n\n  handleMouseRightDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      rightMouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.rightMouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      rightMouseIsPressed: false\n    });\n  } ///////////////////////////////////////\n  // FUNCTION: ANIMATE DIJKSTRA\n  ///////////////////////////////////////\n\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder, startNodeDistance) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder, startNodeDistance);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n\n        if (node.isStart === true) {\n          document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className = 'node node-visited node-img-start';\n        } else if (node.isFinish === true) {\n          document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className = 'node node-visited node-img-finish';\n        } else {\n          document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className = 'node node-visited';\n        }\n      }, 10 * i);\n    }\n  } ///////////////////////////////////////\n  // FUNCTION: ANIMATE SHORTEST PATH \n  // BETWEEN START AND FINISH NODE\n  ///////////////////////////////////////\n\n\n  animateShortestPath(nodesInShortestPathOrder, startNodeDistance) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n\n        if (node.isStart === true) {\n          document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className = 'node node-shortest-path node-img-start';\n        } else if (node.isFinish === true && startNodeDistance !== null) {\n          document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className = 'node node-shortest-path node-img-finish';\n        } else {\n          if (node.isFinish !== true && startNodeDistance !== null) {\n            document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className = 'node node-shortest-path';\n          }\n        }\n      }, 50 * i);\n    }\n  } ///////////////////////////////////////\n  // FUNCTION: CLEAR GRID\n  ///////////////////////////////////////\n\n\n  render() {\n    const _this$state = this.state,\n          grid = _this$state.grid,\n          rightMouseIsPressed = _this$state.rightMouseIsPressed;\n    return React.createElement(React.Fragment, null, React.createElement(Navbar, {\n      generateScatterRandom: this.generateScatterRandom,\n      visualizeAstar: this.visualizeAstar,\n      generateRandomMaze: this.generateRandomMaze,\n      clearGrid: this.clearGrid,\n      visualizeDijkstra: this.visualizeDijkstra,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, grid.map((row, rowIdx) => {\n      return React.createElement(\"div\", {\n        key: rowIdx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, row.map((node, nodeIdx) => {\n        const row = node.row,\n              col = node.col,\n              isFinish = node.isFinish,\n              isStart = node.isStart,\n              isWall = node.isWall;\n        return React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          rightMouseIsPressed: rightMouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseRightDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284\n          },\n          __self: this\n        });\n      }));\n    })), React.createElement(TextArea, {\n      text: \"Dijkstra's algorithm is an algorithm for finding the shortest paths between nodes in a graph, it sets every nodes distance to Infinity, and then the main node searches up, down, left and right. It continues this throughout the execution. \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"note-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(Note, {\n      node: \"true\",\n      title: \"Unvisited Node\",\n      iconClass: \"node\",\n      text: \"This is not the start, finish, or wall node; it is a node that has not yet been visited. This is normally how the probram begins, with none of the nodes visited.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }), React.createElement(Note, {\n      node: \"true\",\n      title: \"Start Node\",\n      iconClass: \"node-start\",\n      text: \"The start node is where the program begins its search; it will make that the primary node and work its way to the solution from there.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }), React.createElement(Note, {\n      node: \"true\",\n      title: \"Finish Node\",\n      iconClass: \"node-finish\",\n      text: \"The finish node is the one that the program is looking for and will attempt to locate. It will give an error if it is unable to locate it\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }), React.createElement(Note, {\n      node: \"true\",\n      title: \"Wall Node\",\n      iconClass: \"node-wall\",\n      text: \"The wall nodes prevent the program from searching in that area; they can also be used to demonstrate how roads can prevent cars from entering a specific location.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), React.createElement(Note, {\n      node: \"true\",\n      title: \"Visited Node\",\n      iconClass: \"node-visited\",\n      text: \"The visited node is the node that the program has visited. It is the node that the program is currently on.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }), React.createElement(Note, {\n      node: \"true\",\n      title: \"Shortest Path Node\",\n      iconClass: \"node-shortest-path\",\n      text: \"The node that the program has visited is the visited node. It's the node where the software looked for the target node previously.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }), React.createElement(Note, {\n      title: \"Grid\",\n      text: \"The grid is the area that the program searches. It is the area that the program searches for the target node.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: 'left',\n        padding: '50px 0px 0px 100px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        display: 'left',\n        padding: '0px 10px 0px 100px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        display: 'left',\n        padding: '0px 10px 30px 100px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        width: '25px',\n        height: '25px',\n        outline: '1px solid rgb(175, 216, 248)',\n        display: 'table-cell',\n        margin: '0% 45%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        verticalAlign: 'text-bottom'\n      },\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    })))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }));\n  } ///////////////////////////////////////\n  // FUNCTION: GENERATE SCATTER RANDOM\n  ///////////////////////////////////////\n\n\n} ///////////////////////////////////////\n// CLASS: NAVBAR\n///////////////////////////////////////\n\nclass Navbar extends Component {\n  render() {\n    let clearGrid = this.props.clearGrid;\n    let visualizeDijkstra = this.props.visualizeDijkstra;\n    let generateRandomMaze = this.props.generateRandomMaze;\n    let visualizeAstar = this.props.visualizeAstar;\n    let generateScatterRandom = this.props.generateScatterRandom;\n    return React.createElement(\"div\", {\n      class: \"navbar-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      class: \"navbar navbar-dark navbar-expand justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      class: \"navbar-nav nav-justified w-100 text-center mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      class: \"nav-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      class: \"nav-link d-flex flex-column\",\n      \"data-toggle\": \"collapse\",\n      onClick: () => visualizeDijkstra(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"fa fa-map-marker fa-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      class: \"d-none d-sm-inline mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, \"Dijkstra's Algorithm\"))), React.createElement(\"li\", {\n      class: \"nav-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      class: \"nav-link d-flex flex-column\",\n      \"data-toggle\": \"collapse\",\n      onClick: () => generateScatterRandom(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"fa fa-question fa-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      class: \"d-none d-sm-inline mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, \"Generate Scatter\"))), React.createElement(\"li\", {\n      class: \"nav-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      class: \"nav-link d-flex flex-column\",\n      \"data-toggle\": \"collapse\",\n      onClick: () => clearGrid(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"fa fa-th fa-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      class: \"d-none d-sm-inline mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, \"Clear Grid\")))))));\n  }\n\n}\n\nclass Note extends Component {\n  render() {\n    const title = this.props.title;\n    const text = this.props.text;\n    const iconClass = this.props.iconClass;\n    const node = this.props.node;\n    let nodeDiv;\n\n    if (node) {\n      nodeDiv = React.createElement(\"div\", {\n        style: {\n          width: '25px',\n          height: '25px',\n          outline: '1px solid rgb(175, 216, 248)',\n          display: 'flex',\n          margin: '15% 45%',\n          justifyContent: 'center',\n          alignItems: 'center',\n          verticalAlign: 'text-bottom'\n        },\n        className: iconClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419\n        },\n        __self: this\n      });\n    } else {\n      nodeDiv = null;\n    } //<a href=\"#\" class=\"btn btn-primary\">Go somewhere</a>\n\n\n    return React.createElement(\"div\", {\n      className: \"note-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"card\",\n      style: {\n        width: \"18rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, this.props.children, nodeDiv, React.createElement(\"div\", {\n      class: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      class: \"card-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, title), React.createElement(\"p\", {\n      class: \"card-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, text))));\n  }\n\n} ///////////////////////////////////////\n// CLASS: TEXTAREA\n///////////////////////////////////////\n\n\nclass TextArea extends Component {\n  render() {\n    const algorithm = this.props.algorithm;\n    const text = this.props.text;\n    return React.createElement(\"div\", {\n      className: \"note-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"note\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    }, text), React.createElement(\"p\", {\n      id: \"algorithm-time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    })));\n  }\n\n} ///////////////////////////////////////\n// FUNCTION: GET INITIAL GRID\n///////////////////////////////////////\n\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < ROWS; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < COLS; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n}; ///////////////////////////////////////\n// FUNCTION: CREATE NODE\n///////////////////////////////////////\n\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n\n  const newNode = _objectSpread({}, node, {\n    isWall: !node.isWall\n  });\n\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStartNode = (grid, row, col) => {\n  const newGrid = grid.slice();\n\n  for (let i = 0; i < ROWS; i++) {\n    for (let j = 0; j < COLS; j++) {\n      if (newGrid[i][j].isStart) {\n        newGrid[i][j].isStart = false;\n      }\n    }\n  }\n\n  const node = newGrid[row][col];\n\n  const newNode = _objectSpread({}, node, {\n    isStart: true,\n    isWall: false\n  });\n\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["C:\\Users\\GAMER\\Desktop\\Pathfinding-Visualizer\\src\\PathfindingVisualizer\\PathfindingVisualizer.tsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","astar","scatterRandom","$","windowWidth","window","width","windowHeight","height","rows","Math","floor","columns","ROWS","COLS","START_NODE_COL","START_NODE_ROW","FINISH_NODE_COL","FINISH_NODE_ROW","on","location","reload","PathfindingVisualizer","constructor","props","clearGrid","grid","state","document","getElementById","innerHTML","i","length","j","isVisited","isWall","distance","Infinity","previousNode","isStart","className","isFinish","visualizeDijkstra","timeStart","performance","now","startNode","finishNode","returnDijkstra","startNodeDistance","nodesInShortestPathOrder","animateDijkstra","visitedNodesInOrder","timeEnd","string","visualizeAstar","returnAstar","generateScatterRandom","walledMaze","setState","generateRandomMaze","rightMouseIsPressed","leftMouseIsPressed","componentDidMount","getInitialGrid","onload","nodes","querySelectorAll","addEventListener","e","classList","add","remove","button","console","log","target","id","componentDidUpdate","prevProps","prevState","event","key","newGrid","setTimeout","handleMouseRightDown","row","col","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateShortestPath","node","render","map","rowIdx","nodeIdx","display","padding","outline","margin","justifyContent","alignItems","verticalAlign","Navbar","Note","title","text","iconClass","nodeDiv","children","TextArea","algorithm","currentRow","push","createNode","slice","newNode","getNewGridWithStartNode"],"mappings":"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","sourcesContent":["///////////////////////////////////////\n// IMPORTING MODULES\n///////////////////////////////////////\n\nimport React, { Component, useEffect } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport astar from '../algorithms/astar';\nimport './PathfindingVisualizer.css';\nimport newMaze from '../algorithms/generateMaze'\nimport scatterRandom from '../algorithms/scatterRandom';\nimport $ from 'jquery';\n\n\nlet windowWidth = $(window).width();\nlet windowHeight = $(window).height();\nlet rows = Math.floor(windowHeight / 50);\nlet columns = Math.floor(windowWidth / 30);\n\nlet ROWS = rows; //16\nlet COLS = columns; //50\nlet START_NODE_COL = Math.floor(COLS / 2.5);\nlet START_NODE_ROW = Math.floor(ROWS / 2);\nlet FINISH_NODE_COL = Math.floor(COLS / 1.5);\nlet FINISH_NODE_ROW = Math.floor(ROWS / 2);\n\n\n$(window).on('resize', function(){\n  /*\n  let windowWidth = $(window).width();\n    let windowHeight = $(window).height();\n    let rows = Math.floor(windowHeight / 50);\n    let columns = Math.floor(windowWidth / 30);\n    ROWS = rows; //16\n    COLS = columns; //50\n    START_NODE_COL = Math.floor(COLS / 2.5);\n    START_NODE_ROW = Math.floor(ROWS / 2);\n    FINISH_NODE_COL = Math.floor(COLS / 1.5);\n    FINISH_NODE_ROW = Math.floor(ROWS / 2);\n  console.log(START_NODE_COL, START_NODE_ROW);\n  \n  */\n  window.location.reload();\n\n})\n\n///////////////////////////////////////\n// CLASS: PATHFINDINGVISUALIZER\n///////////////////////////////////////\n\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      rightMouseIsPressed: false,\n      leftMouseIsPressed: false,\n    };\n  }\n\n  ///////////////////////////////////////\n  // FUNCTION: PATHFINDINGVISUALIZER ON MOUNT\n  ///////////////////////////////////////\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n    window.onload = function(){\n      //TODO: Implement remove and add wall with this, and add drag\n      const nodes = document.querySelectorAll('.node')\n      for(let i = 0; i < nodes.length; i++){\n        nodes[i].addEventListener('mouseenter', function(e){\n          nodes[i].classList.add('node-hover');\n        })\n        nodes[i].addEventListener('mouseleave', function(e){\n          nodes[i].classList.remove('node-hover');\n        })\n        nodes[i].addEventListener('mousedown', function(e){\n          if(e.button === 0){\n            console.log(\"left\")\n            console.log(e.target.id)\n          }\n          else if(e.button === 2){\n            console.log(\"right\")\n          }\n          \n        })\n      }\n    }\n  }       \n\n  ///////////////////////////////////////\n  // FUNCTION: PATHFINDINGVISUALIZER ON STATE RELOAD AND UPDATE\n  ///////////////////////////////////////\n  componentDidUpdate(prevProps, prevState) {\n    const { grid }  = this.state;\n\n    //write an arrow function to get the key pressed\n    document.addEventListener('keypress', (event) => {\n      if (grid !== prevState.grid) {\n        if (event.key === 's') {\n          \n              const newGrid = grid;\n              setTimeout(() => {\n                this.setState({ grid: newGrid });\n                console.log(\"set state\")\n              }, 600);\n              \n            }\n          }\n  });\n}\n\n  handleMouseRightDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, rightMouseIsPressed: true});\n  }\n\n\n  handleMouseEnter(row, col) {\n    if (!this.state.rightMouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({rightMouseIsPressed: false});\n  }\n\n  ///////////////////////////////////////\n  // FUNCTION: ANIMATE DIJKSTRA\n  ///////////////////////////////////////\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder, startNodeDistance) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder, startNodeDistance);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        if(node.isStart === true){\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited node-img-start';\n        }else if(node.isFinish === true){\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited node-img-finish';\n        }else{\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n        }\n      }, 10 * i);\n    }\n  }\n\n  ///////////////////////////////////////\n  // FUNCTION: ANIMATE SHORTEST PATH \n  // BETWEEN START AND FINISH NODE\n  ///////////////////////////////////////\n  animateShortestPath(nodesInShortestPathOrder, startNodeDistance) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        if(node.isStart === true){\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path node-img-start';\n        }else if(node.isFinish === true && startNodeDistance !== null){\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path node-img-finish';\n        }else{\n        if(node.isFinish !== true && startNodeDistance !== null){\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n        }}\n        }, 50 * i);\n    }\n  }\n\n  ///////////////////////////////////////\n  // FUNCTION: CLEAR GRID\n  ///////////////////////////////////////\n  clearGrid = () => {\n    const { grid } = this.state;\n    document.getElementById('algorithm-time').innerHTML = '';\n    for(let i  = 0; i < grid.length; i++){\n      for(let j = 0; j < grid[0].length; j++){\n        grid[i][j].isVisited = false;\n        grid[i][j].isWall = false;\n        grid[i][j].distance = Infinity;\n        grid[i][j].previousNode = null;\n        if(grid[i][j].isStart === true){\n          document.getElementById(`node-${i}-${j}`).className = 'node node-img-start';\n        }else if(grid[i][j].isFinish === true){\n          document.getElementById(`node-${i}-${j}`).className = 'node node-img-finish';\n        }else if(grid[i][j].isWall === true){\n          document.getElementById(`node-${i}-${j}`).className = 'node node-wall';\n        }else{\n        document.getElementById(`node-${i}-${j}`).className =\n          'node';\n        }\n      }\n    }\n  }\n\n  ///////////////////////////////////////\n  // FUNCTION: VISUALIZE DIJKSTRA\n  ///////////////////////////////////////\n  visualizeDijkstra = () => {\n    const { grid } = this.state;\n    for(let i  = 0; i < grid.length; i++){\n      for(let j = 0; j < grid[i].length; j++){\n        if(grid[i][j].isStart === true){\n          document.getElementById(`node-${i}-${j}`).className = 'node node-img-start';\n        }else if(grid[i][j].isFinish === true){\n          document.getElementById(`node-${i}-${j}`).className = 'node node-img-finish';\n        }else if(grid[i][j].isWall === true){\n          document.getElementById(`node-${i}-${j}`).className = 'node node-wall';\n        }else{\n        document.getElementById(`node-${i}-${j}`).className =\n          'node';\n        }\n        grid[i][j].distance = Infinity;\n        grid[i][j].isVisited = false;\n        grid[i][j].previousNode = null;\n        }\n      }\n    const timeStart = performance.now();\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const returnDijkstra = dijkstra(grid, startNode, finishNode);\n    const startNodeDistance = returnDijkstra.startNodeDistance;\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(returnDijkstra.visitedNodesInOrder, nodesInShortestPathOrder, startNodeDistance);\n    const timeEnd = performance.now();\n    let string = \"\"\n    if(startNodeDistance === null){\n      string = \"and can't reach the target node, it's enclosed into a box!\"\n    }else{\n      string = `and took ${startNodeDistance} steps.`\n    }\n    document.getElementById('algorithm-time').innerHTML = `Dijkstra's algorithm took ${(timeEnd - timeStart) / 1000} seconds to execute ${string}`;\n  }\n  \n\n  visualizeAstar = () => {\n    const { grid } = this.state;\n    for(let i  = 0; i < grid.length; i++){\n      for(let j = 0; j < grid[i].length; j++){\n        if(grid[i][j].isStart === true){\n          document.getElementById(`node-${i}-${j}`).className = 'node node-img-start';\n        }else if(grid[i][j].isFinish === true){\n          document.getElementById(`node-${i}-${j}`).className = 'node node-img-finish';\n        }else if(grid[i][j].isWall === true){\n          document.getElementById(`node-${i}-${j}`).className = 'node node-wall';\n        }else{\n        document.getElementById(`node-${i}-${j}`).className =\n          'node';\n        }\n        grid[i][j].distance = Infinity;\n        grid[i][j].isVisited = false;\n        //grid[i][j].isWall = false;\n        grid[i][j].previousNode = null;\n        }\n      }\n    const timeStart = performance.now();\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const returnAstar = astar(grid, startNode, finishNode, 8);\n    const startNodeDistance = returnAstar.startNodeDistance;\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(returnAstar.visitedNodesInOrder, nodesInShortestPathOrder);\n    const timeEnd = performance.now();\n  }\n\n  render() {\n    const { grid, rightMouseIsPressed } = this.state;\n\n    return (\n      <>\n        <Navbar generateScatterRandom={this.generateScatterRandom} visualizeAstar={this.visualizeAstar} generateRandomMaze={this.generateRandomMaze} clearGrid={this.clearGrid} visualizeDijkstra={this.visualizeDijkstra}/>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      rightMouseIsPressed={rightMouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseRightDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        \n        <TextArea text={\"Dijkstra's algorithm is an algorithm for finding the shortest paths between nodes in a graph, it sets every nodes distance to Infinity, and then the main node searches up, down, left and right. It continues this throughout the execution. \"}/>\n        <div className='note-wrapper'>   \n          <Note node=\"true\" title='Unvisited Node' iconClass='node' text='This is not the start, finish, or wall node; it is a node that has not yet been visited. This is normally how the probram begins, with none of the nodes visited.'/>\n          <Note node=\"true\" title='Start Node' iconClass='node-start' text='The start node is where the program begins its search; it will make that the primary node and work its way to the solution from there.'/>\n          <Note node=\"true\" title='Finish Node' iconClass='node-finish' text=\"The finish node is the one that the program is looking for and will attempt to locate. It will give an error if it is unable to locate it\"/>\n          <Note node=\"true\" title='Wall Node' iconClass='node-wall' text='The wall nodes prevent the program from searching in that area; they can also be used to demonstrate how roads can prevent cars from entering a specific location.'/>\n          <Note node=\"true\" title='Visited Node' iconClass='node-visited' text='The visited node is the node that the program has visited. It is the node that the program is currently on.'/>\n          <Note node=\"true\" title='Shortest Path Node' iconClass='node-shortest-path' text=\"The node that the program has visited is the visited node. It's the node where the software looked for the target node previously.\"/>\n          <Note title=\"Grid\" text='The grid is the area that the program searches. It is the area that the program searches for the target node.'>\n            <div style={{display: 'left', padding: '50px 0px 0px 100px'}}>\n              <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n              <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n              <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n            </div>\n\n          <div style={{display: 'left', padding: '0px 10px 0px 100px'}}>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n          </div>\n          <div style={{display: 'left', padding: '0px 10px 30px 100px'}}>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n            <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'table-cell', margin: '0% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className='node'></div>\n          </div> \n          </Note>\n        </div>\n        <br></br>\n        </>\n    );\n  }\n\n\n  ///////////////////////////////////////\n  // FUNCTION: GENERATE SCATTER RANDOM\n  ///////////////////////////////////////\n  generateScatterRandom = () => {\n    const { grid } = this.state;\n    const walledMaze = scatterRandom(grid)\n    this.setState({\n      grid: walledMaze\n    })\n  }\n  \n  generateRandomMaze = () => {\n    /*console.log(walledMaze);\n    for(let i = 0; i < ROWS; i++){\n      for(let j = 0; j < COLS; j++){\n        if(walledMaze[0][i][j] === 1){\n          grid[i][j].isWall = true;\n        }else{\n          grid[i][j].isWall = false;\n        }\n        grid[i][j].isWall = false;\n        grid[i][j].isVisited = false;\n        grid[i][j].distance = Infinity;\n        grid[i][j].previousNode = null;\n      }\n    }*/\n      }\n}\n\n///////////////////////////////////////\n// CLASS: NAVBAR\n///////////////////////////////////////\n\nclass Navbar extends Component {\n  render() {\n    let clearGrid = this.props.clearGrid;\n    let visualizeDijkstra = this.props.visualizeDijkstra; \n    let generateRandomMaze = this.props.generateRandomMaze;    \n    let visualizeAstar = this.props.visualizeAstar;\n    let generateScatterRandom = this.props.generateScatterRandom;\n\n    return (\n      <div class=\"navbar-wrapper\">\n      <nav class=\"navbar navbar-dark navbar-expand justify-content-center\">\n    <div class=\"container\">\n        <ul class=\"navbar-nav nav-justified w-100 text-center mt-1\">\n        <li class=\"nav-item\">\n                <a class=\"nav-link d-flex flex-column\" data-toggle=\"collapse\" onClick={() => visualizeDijkstra()}>\n                    <span class=\"fa fa-map-marker fa-lg\"></span>\n                    <span class=\"d-none d-sm-inline mt-1\">Dijkstra's Algorithm</span>\n                </a>\n            </li> \n            <li class=\"nav-item\">\n                <a class=\"nav-link d-flex flex-column\" data-toggle=\"collapse\" onClick={() => generateScatterRandom()}>\n                    <span class=\"fa fa-question fa-lg\"></span>\n                    <span class=\"d-none d-sm-inline mt-1\">Generate Scatter</span>\n                </a>\n            </li>\n            <li class=\"nav-item\">\n                <a class=\"nav-link d-flex flex-column\" data-toggle=\"collapse\" onClick={() => clearGrid()}>\n                    <span class=\"fa fa-th fa-lg\"></span>\n                    <span class=\"d-none d-sm-inline mt-1\">Clear Grid</span>\n                </a>\n            </li>\n        </ul>\n    </div>\n</nav>  \n</div>\n      \n    );\n  }\n}\n\nclass Note extends Component {\n  \n  render() {\n    const title = this.props.title;\n    const text = this.props.text;\n    const iconClass = this.props.iconClass;\n    const node = this.props.node;\n    let nodeDiv;\n    if(node){\n      nodeDiv = <div style={{width: '25px', height: '25px', outline: '1px solid rgb(175, 216, 248)', display: 'flex', margin: '15% 45%', justifyContent: 'center', alignItems: 'center', verticalAlign: 'text-bottom'}} className={iconClass}></div>\n    }else{\n      nodeDiv = null;\n    }\n\n    //<a href=\"#\" class=\"btn btn-primary\">Go somewhere</a>\n    return (\n      <div className=\"note-wrapper\">\n      <div class=\"card\" style={{width: \"18rem\"}}>\n        {this.props.children}\n        {nodeDiv}\n        <div class=\"card-body\">\n          <h5 class=\"card-title\">{title}</h5>\n          <p class=\"card-text\">{text}</p>\n        </div>\n      </div>\n      </div>\n    );\n    }\n}\n\n///////////////////////////////////////\n// CLASS: TEXTAREA\n///////////////////////////////////////\n\nclass TextArea extends Component {\n  render() {\n    const algorithm = this.props.algorithm;\n    const text = this.props.text\n    return (\n      <div className=\"note-wrapper\">\n        <div className=\"note\">\n          <p>{text}</p>\n          <p id=\"algorithm-time\"></p>\n          </div>\n      </div>\n    );\n  }\n}\n\n///////////////////////////////////////\n// FUNCTION: GET INITIAL GRID\n///////////////////////////////////////\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < ROWS; row++) {\n    const currentRow = [];\n    for (let col = 0; col < COLS; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\n///////////////////////////////////////\n// FUNCTION: CREATE NODE\n///////////////////////////////////////\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStartNode = (grid, row, col) => {\n  const newGrid = grid.slice();\n\n  for (let i = 0; i < ROWS; i++) {\n    for (let j = 0; j < COLS; j++) {\n      if (newGrid[i][j].isStart) {\n        newGrid[i][j].isStart = false;\n      }\n    }\n  }\n\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isStart: true,\n    isWall: false,\n  };\n\n  newGrid[row][col] = newNode;\n  return newGrid;\n}\n"]},"metadata":{},"sourceType":"module"}